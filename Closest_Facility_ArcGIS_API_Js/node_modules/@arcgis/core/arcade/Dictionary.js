/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import t from"./ImmutableArray.js";import{i,j as s,f as r,s as e,t as n,u as o,d as a,n as u,w as c,a as f}from"../chunks/languageUtils.js";import l from"../geometry/Geometry.js";function b(t,e=!1){if(null==t)return null;if(s(t))return n(t);if(i(t))return o(t);if(r(t))return a(t);if(u(t))return c(t);if(f(t)){const i=[];for(const s of t)i.push(b(s,e));return i}const l=new h;l.immutable=!1;for(const i of Object.keys(t)){const s=t[i];void 0!==s&&l.setField(i,b(s,e))}return l.immutable=e,l}class h{constructor(t){this.declaredClass="esri.arcade.Dictionary",this.attributes=null,this.plain=!1,this.immutable=!0,this.attributes=t instanceof h?t.attributes:null==t?{}:t}field(t){const i=t.toLowerCase(),s=this.attributes[t];if(void 0!==s)return s;for(const r in this.attributes)if(r.toLowerCase()===i)return this.attributes[r];throw new Error("Field not Found : "+t)}setField(t,i){if(this.immutable)throw new Error("Dictionary is Immutable");const s=t.toLowerCase();if(void 0===this.attributes[t]){for(const t in this.attributes)if(t.toLowerCase()===s)return void(this.attributes[t]=i);this.attributes[t]=i}else this.attributes[t]=i}hasField(t){const i=t.toLowerCase();if(void 0!==this.attributes[t])return!0;for(const s in this.attributes)if(s.toLowerCase()===i)return!0;return!1}keys(){let t=[];for(const i in this.attributes)t.push(i);return t=t.sort(),t}castToText(){let n="";for(const o in this.attributes){""!==n&&(n+=",");const a=this.attributes[o];null==a?n+=JSON.stringify(o)+":null":i(a)||s(a)||r(a)?n+=JSON.stringify(o)+":"+JSON.stringify(a):a instanceof l||a instanceof t||a instanceof Array?n+=JSON.stringify(o)+":"+e(a):a instanceof Date?n+=JSON.stringify(o)+":"+JSON.stringify(a):null!==a&&"object"==typeof a&&void 0!==a.castToText&&(n+=JSON.stringify(o)+":"+a.castToText())}return"{"+n+"}"}static convertObjectToArcadeDictionary(t,i=!0){const s=new h;s.immutable=!1;for(const r in t){const i=t[r];void 0!==i&&s.setField(r.toString(),b(i))}return s.immutable=i,s}static convertJsonToArcade(t,i=!1){return b(t,i)}}export{h as default};
