/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{EvaluateAmbientLighting as e}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientLighting.glsl.js";import{EvaluateMainLighting as r}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateMainLighting.glsl.js";import{CloudsParallaxShading as i}from"../views/3d/webgl-engine/core/shaderLibrary/util/CloudsParallaxShading.glsl.js";import{ColorConversion as o}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{RgbaFloatEncoding as a}from"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js";import{glsl as n}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as d}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";function l(){const l=new d;return l.attributes.add("position","vec2"),l.varyings.add("worldRay","vec3"),l.vertex.uniforms.add("inverseProjectionMatrix","mat4"),l.vertex.uniforms.add("inverseViewMatrix","mat4"),l.vertex.code.add(n`void main(void) {
vec3 posViewNear = (inverseProjectionMatrix * vec4(position, -1.0, 1.0)).xyz;
worldRay = (inverseViewMatrix * vec4(posViewNear, 0.0)).xyz;
gl_Position = vec4(position, 1.0, 1.0);
}`),l.fragment.uniforms.add("lightingMainDirection","vec3").add("cubeMap","samplerCube"),l.fragment.include(o),l.fragment.include(a),l.include(r),l.include(e,{pbrMode:0,lightingSphericalHarmonicsOrder:2}),l.include(i),l.fragment.code.add(n`void main() {
vec4 cloudsColor = crossFade == 0 ? renderCloud(normalize(worldRay)) : renderCloudCrossFade(normalize(worldRay));
gl_FragColor = vec4((1.0 - totalFadeInOut) * cloudsColor.rgb, cloudsColor.a);
}`),l}var s=Object.freeze({__proto__:null,build:l});export{s as C,l as b};
