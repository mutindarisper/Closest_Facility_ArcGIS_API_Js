/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{ScreenSpacePass as e}from"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.js";import{ReadLinearDepth as a}from"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js";import{ReadShadowMap as r}from"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js";import{CameraSpace as o}from"../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl.js";import{RgbaFloatEncoding as s}from"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js";import{glsl as t}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as d}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";const i=255,n=1/i;function l(l){const c=new d;c.fragment.include(s),c.fragment.include(a),c.include(o),c.include(e);const{pass:p}=l;if(1===p){const{visualization:e,bandsEnabled:a}=l;c.fragment.constants.add("inverseSampleValue","float",i),c.fragment.uniforms.add("shadowCastMap","sampler2D"),c.fragment.uniforms.add("sampleScale","float"),c.fragment.uniforms.add("opacityFromElevation","float");const r=0===e,o=1===e;c.fragment.uniforms.add("color","vec4"),r?a&&c.fragment.uniforms.add("bandSize","float"):o&&c.fragment.uniforms.add("threshold","float"),c.fragment.code.add(t`
      void main(void) {
        vec4 record = texture2D(shadowCastMap, uv);
        float pixelSamples = record.r * inverseSampleValue;

        if (pixelSamples < 1.0) {
          discard;
        }

        float strength = pixelSamples * sampleScale;

        ${o?t`
            if (strength <= threshold) {
              discard;
            }`:""}

        ${r&&a?t`strength = ceil(strength / bandSize) * bandSize;`:""}

        gl_FragColor = vec4(color.xyz, color.a * opacityFromElevation ${r?t`* strength`:""});
      }
    `)}else 0!==p&&2!==p||(c.include(r),c.fragment.uniforms.add("depthMap","sampler2D"),c.fragment.uniforms.add("inverseView","mat4"),c.fragment.uniforms.add("nearFar","vec2"),0===p?c.fragment.constants.add("sampleValue","float",n):c.fragment.constants.add("shadowColor","vec4",[0,0,0,.8]),c.fragment.code.add(t`
      void main(void) {

        float depth = rgba2float(texture2D(depthMap, uv));
        // 0.0 is the clear value of depthMap, which means nothing has been drawn there and we should discard
        if (depth == 0.0) {
          discard;
        }

        float currentPixelDepth = linearDepthFromFloat(depth, nearFar);

        if (-currentPixelDepth > nearFar.y || -currentPixelDepth < nearFar.x) {
          discard;
        }

        vec4 currentPixelPos = vec4(reconstructPosition(gl_FragCoord.xy, currentPixelDepth), 1.0);
        vec4 worldSpacePos = inverseView * currentPixelPos;

        mat4 shadowMatrix;
        float linearDepth = -currentPixelDepth;
        int i = chooseCascade(linearDepth, shadowMatrix);

        if (i >= uShadowMapNum) {
          discard;
        }

        vec3 lvpos = lightSpacePosition(worldSpacePos.xyz, shadowMatrix);

        // vertex completely outside? -> no shadow
        if (lvpos.z >= 1.0 || lvpos.x < 0.0 || lvpos.x > 1.0 || lvpos.y < 0.0 || lvpos.y > 1.0) {
          discard;
        }

        vec2 uvShadow = cascadeCoordinates(i, lvpos);

        float depthShadow = readShadowMapDepth(uvShadow, uShadowMapTex);
        bool shadow = depthShadow < lvpos.z;

        if (!shadow) {
          discard;
        }

        gl_FragColor = ${0===p?t`vec4(sampleValue)`:t`shadowColor`};
      }
    `));return c}var c=Object.freeze({__proto__:null,shadowCastMaxSamples:i,build:l});export{c as S,l as b,i as s};
