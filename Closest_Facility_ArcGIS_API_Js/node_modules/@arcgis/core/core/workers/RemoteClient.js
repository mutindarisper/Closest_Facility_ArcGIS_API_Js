/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{version as e}from"../../kernel.js";import s from"../Error.js";import{on as t}from"../events.js";import{isSome as o}from"../maybe.js";import{onAbortOrThrow as r,createAbortError as i,createAbortController as n,isPromiseLike as a,isAbortError as l}from"../promiseUtils.js";import{newJobId as c,MessageType as p,receiveMessage as h,toInvokeError as u,postMessage as _}from"./utils.js";import{commitHash as d,buildDate as m}from"../../support/revision.js";const g={statsWorker:()=>import("../../smartMapping/statistics/support/statsWorker.js"),geometryEngineWorker:()=>import("../../geometry/geometryEngineWorker.js"),CSVSourceWorker:()=>import("../../layers/graphics/sources/support/CSVSourceWorker.js"),EdgeProcessingWorker:()=>import("../../views/3d/webgl-engine/lib/edgeRendering/EdgeProcessingWorker.js"),ElevationSamplerWorker:()=>import("../../geometry/support/meshUtils/ElevationSamplerWorker.js"),FeatureServiceSnappingSourceWorker:()=>import("../../views/interactive/snapping/featureSources/featureServiceSource/FeatureServiceSnappingSourceWorker.js"),GeoJSONSourceWorker:()=>import("../../layers/graphics/sources/geojson/GeoJSONSourceWorker.js"),LercWorker:()=>import("../../layers/support/LercWorker.js"),MemorySourceWorker:()=>import("../../layers/graphics/sources/support/MemorySourceWorker.js"),PBFDecoderWorker:()=>import("../../views/3d/support/PBFDecoderWorker.js"),Pipeline:()=>import("../../views/2d/layers/features/Pipeline.js"),PointCloudWorker:()=>import("../../views/3d/layers/PointCloudWorker.js"),RasterWorker:()=>import("../../layers/support/RasterWorker.js"),SceneLayerWorker:()=>import("../../views/3d/layers/SceneLayerWorker.js"),WFSSourceWorker:()=>import("../../layers/graphics/sources/WFSSourceWorker.js"),WorkerTileHandler:()=>import("../../views/2d/engine/vectorTiles/WorkerTileHandler.js")},{CLOSE:b,ABORT:k,INVOKE:v,RESPONSE:y,OPEN_PORT:j,ON:f}=p;class M{constructor(e){this._timer=null,this._cancelledJobIds=new Set,this._invokeMessages=[],this._invoke=e,this._timer=null,this._process=this._process.bind(this)}push(e){e.type===p.ABORT?this._cancelledJobIds.add(e.jobId):(this._invokeMessages.push(e),null===this._timer&&(this._timer=setTimeout(this._process,0)))}clear(){this._invokeMessages.length=0,this._cancelledJobIds.clear(),this._timer=null}_process(){this._timer=null;for(const e of this._invokeMessages)this._cancelledJobIds.has(e.jobId)||this._invoke(e);this._cancelledJobIds.clear(),this._invokeMessages.length=0}}class S{constructor(e,s){this._port=e,this._outJobs=new Map,this._inJobs=new Map,this._invokeQueue=new M((e=>this._onInvokeMessage(e))),this._client=s.client,this._onMessage=this._onMessage.bind(this),this._channel=s.channel,this._schedule=s.schedule,this._port.addEventListener("message",this._onMessage),this._port.start()}static connect(e){const s=new MessageChannel;let t;t="function"==typeof e?new e:"default"in e&&"function"==typeof e.default?new e.default:e;const o=new S(s.port1,{channel:s,client:t});return"object"==typeof t&&"remoteClient"in t&&(t.remoteClient=o),S.clients.set(o,t),s.port2}static loadWorker(e){const s=g[e];return s?s():Promise.resolve(null)}close(){this._post({type:b}),this._close()}isBusy(){return this._outJobs.size>0}invoke(e,t,o){const n=o&&o.signal,a=o&&o.transferList;if(!this._port)return Promise.reject(new s("worker:port-closed",`Cannot call invoke('${e}'), port is closed`,{methodName:e,data:t}));const l=c();return new Promise(((s,o)=>{const c=r(n,(()=>{var e;const s=this._outJobs.get(l);s&&(this._outJobs.delete(l),null==(e=s.abortHandle)||e.remove(),this._post({type:k,jobId:l}),o(i()))})),p={resolve:s,reject:o,abortHandle:c,debugInfo:e};this._outJobs.set(l,p),this._post({type:v,jobId:l,methodName:e,abortable:null!=n},t,a)}))}on(e,s){const t=new MessageChannel;function o(e){s(e.data)}return this._port.postMessage({type:p.ON,eventType:e,port:t.port2},[t.port2]),t.port1.addEventListener("message",o),t.port1.start(),{remove(){t.port1.postMessage({type:p.CLOSE}),t.port1.close(),t.port1.removeEventListener("message",o)}}}openPort(){const e=new MessageChannel;return this._post({type:j,port:e.port2}),e.port1}_close(){this._channel&&(this._channel=null),this._port.removeEventListener("message",this._onMessage),this._port.close(),this._outJobs.forEach((e=>{var s;null==(s=e.abortHandle)||s.remove(),e.reject(i(`Worker closing, aborting job calling '${e.debugInfo}'`))})),this._inJobs.clear(),this._outJobs.clear(),this._invokeQueue.clear(),this._port=this._client=this._schedule=null}_onMessage(e){o(this._schedule)?this._schedule((()=>this._processMessage(e))):this._processMessage(e)}_processMessage(e){const s=h(e);if(s)switch(s.type){case y:this._onResponseMessage(s);break;case v:this._invokeQueue.push(s);break;case k:this._onAbortMessage(s);break;case b:this._onCloseMessage();break;case j:this._onOpenPortMessage(s);break;case f:this._onOnMessage(s)}}_onAbortMessage(e){const s=this._inJobs,t=e.jobId,o=s.get(t);this._invokeQueue.push(e),o&&(o.controller&&o.controller.abort(),s.delete(t))}_onCloseMessage(){const e=this._client;this._close(),e&&"destroy"in e&&S.clients.get(this)===e&&e.destroy(),S.clients.delete(this),e&&e.remoteClient&&(e.remoteClient=null)}_onInvokeMessage(e){const{methodName:s,jobId:t,data:o,abortable:r}=e,i=r?n():null,c=this._inJobs;let p,h=this._client,_=h[s];try{if(!_&&s&&-1!==s.indexOf(".")){const e=s.split(".");for(let s=0;s<e.length-1;s++)h=h[e[s]],_=h[e[s+1]]}if("function"!=typeof _)throw new TypeError(`${s} is not a function`);p=_.call(h,o,{client:this,signal:i?i.signal:null})}catch(d){return void this._post({type:y,jobId:t,error:u(d)})}a(p)?(c.set(t,{controller:i,promise:p}),p.then((e=>{c.has(t)&&(c.delete(t),this._post({type:y,jobId:t},e))}),(e=>{c.has(t)&&(c.delete(t),l(e)||this._post({type:y,jobId:t,error:u(e||{message:`Error encountered at method ${s}`})}))}))):this._post({type:y,jobId:t},p)}_onOpenPortMessage(e){new S(e.port,{client:this._client})}_onOnMessage(e){const{port:s}=e,o=this._client.on(e.eventType,(e=>{s.postMessage(e)})),r=t(e.port,"message",(e=>{h(e).type===p.CLOSE&&(r.remove(),o.remove(),s.close())}))}_onResponseMessage(e){var t;const{jobId:o,error:r,data:i}=e,n=this._outJobs;if(!n.has(o))return;const a=n.get(o);n.delete(o),null==(t=a.abortHandle)||t.remove(),r?a.reject(s.fromJSON(JSON.parse(r))):a.resolve(i)}_post(e,s,t){return _(this._port,e,s,t)}}S.kernelInfo={revision:d,version:e,buildDate:m},S.clients=new Map;export{S as default};
