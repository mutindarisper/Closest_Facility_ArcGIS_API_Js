/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{px2pt as t}from"../../core/screenUtils.js";import{c as s}from"../../chunks/mat4f32.js";import{sepia as r,saturate as o,invert as i,grayscale as e,contrast as a,brightness as h,rotateHue as n}from"./colorMatrixFunctions.js";function u(t){return"colorMatrix"in t}class c{constructor(t,s,r){this.strength=t,this.radius=s,this.threshold=r,this.type="bloom"}interpolate(t,s,r){this.strength=M(t.strength,s.strength,r),this.radius=M(t.radius,s.radius,r),this.threshold=M(t.threshold,s.threshold,r)}clone(){return new c(this.strength,this.radius,this.threshold)}toJSON(){return{type:"bloom",radius:x(this.radius),strength:this.strength,threshold:this.threshold}}}class l{constructor(t){this.radius=t,this.type="blur"}interpolate(t,s,r){this.radius=Math.round(M(t.radius,s.radius,r))}clone(){return new l(this.radius)}toJSON(){return{type:"blur",radius:x(this.radius)}}}class d{constructor(t,s){this.type=t,this.amount=s,"invert"!==this.type&&"grayscale"!==this.type&&"sepia"!==this.type||(this.amount=Math.min(this.amount,1))}get colorMatrix(){return this._colorMatrix||this._updateMatrix(),this._colorMatrix}interpolate(t,s,r){this.amount=M(t.amount,s.amount,r),this._updateMatrix()}clone(){return new d(this.type,this.amount)}toJSON(){return{type:this.type,amount:this.amount}}_updateMatrix(){const t=this._colorMatrix||s();switch(this.type){case"brightness":this._colorMatrix=h(t,this.amount);break;case"contrast":this._colorMatrix=a(t,this.amount);break;case"grayscale":this._colorMatrix=e(t,this.amount);break;case"invert":this._colorMatrix=i(t,this.amount);break;case"saturate":this._colorMatrix=o(t,this.amount);break;case"sepia":this._colorMatrix=r(t,this.amount)}}}class p{constructor(t,s,r,o){this.offsetX=t,this.offsetY=s,this.blurRadius=r,this.color=o,this.type="drop-shadow"}interpolate(t,s,r){this.offsetX=M(t.offsetX,s.offsetX,r),this.offsetY=M(t.offsetY,s.offsetY,r),this.blurRadius=M(t.blurRadius,s.blurRadius,r),this.color[0]=Math.round(M(t.color[0],s.color[0],r)),this.color[1]=Math.round(M(t.color[1],s.color[1],r)),this.color[2]=Math.round(M(t.color[2],s.color[2],r)),this.color[3]=M(t.color[3],s.color[3],r)}clone(){return new p(this.offsetX,this.offsetY,this.blurRadius,[...this.color])}toJSON(){const t=[...this.color];return t[3]*=255,{type:"drop-shadow",xoffset:x(this.offsetX),yoffset:x(this.offsetY),blurRadius:x(this.blurRadius),color:t}}}class f{constructor(t){this.angle=t,this.type="hue-rotate"}get colorMatrix(){return this._colorMatrix||this._updateMatrix(),this._colorMatrix}interpolate(t,s,r){this.angle=M(t.angle,s.angle,r),this._updateMatrix()}clone(){return new f(this.angle)}toJSON(){return{type:"hue-rotate",angle:this.angle}}_updateMatrix(){const t=this._colorMatrix||s();this._colorMatrix=n(t,this.angle)}}class m{constructor(t){this.amount=t,this.type="opacity",this.amount=Math.min(this.amount,1)}interpolate(t,s,r){this.amount=M(t.amount,s.amount,r)}clone(){return new m(this.amount)}toJSON(){return{type:"opacity",amount:this.amount}}}function M(t,s,r){return t+(s-t)*r}function x(s){return Math.round(1e3*t(s))/1e3}export{c as BloomEffect,l as BlurEffect,d as ColorMatrixEffect,p as DropShadowEffect,f as HueRotateEffect,m as OpacityEffect,u as isColorMatrixEffect};
