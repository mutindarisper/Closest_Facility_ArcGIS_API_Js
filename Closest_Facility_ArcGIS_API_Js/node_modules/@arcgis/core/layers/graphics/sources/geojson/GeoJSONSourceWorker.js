/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import e from"../../../../request.js";import t from"../../../../core/Error.js";import{isSome as i}from"../../../../core/maybe.js";import{getJsonType as s}from"../../../../geometry/support/jsonUtils.js";import{WGS84 as n,equals as r}from"../../../../geometry/support/spatialReferenceUtils.js";import{convertFromGeometry as a,convertToGeometry as o,convertFromFeatures as l,convertToFeature as u,convertFromFeature as d}from"../../featureConversionUtils.js";import p from"../../data/FeatureStore.js";import{project as y,checkProjectionSupport as f}from"../../data/projectionSupport.js";import m from"../../data/QueryEngine.js";import{validateGeoJSON as c,inferLayerProperties as h,createOptimizedFeatures as g}from"./geojson.js";import{createDrawingInfo as I,createDefaultTemplate as F,createDefaultAttributesFunction as b}from"../support/clientSideDefaults.js";import{loadGeometryEngineForSimplify as j,mixAttributes as _,createFeatureEditSuccessResult as E,createFeatureEditErrorResult as T,simplify as q}from"../support/sourceUtils.js";import x from"../../../support/FieldsIndex.js";import{kebabDict as w}from"../../../support/fieldType.js";import{getFieldDefaultValue as R}from"../../../support/fieldUtils.js";const D={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class O{constructor(){this._queryEngine=null}destroy(){this._queryEngine&&this._queryEngine&&this._queryEngine.destroy(),this._queryEngine=this._requiredFields=this._fieldsIndex=this._createDefaultAttributes=null}async load(s){const l=[];await this._checkProjection(s.spatialReference);let u=null;if(s.url){u=(await e(s.url,{responseType:"json"})).data,await c(u)}const d=h(u,{geometryType:s.geometryType}),f=s.fields||d.fields||[],j=null!=s.hasZ?s.hasZ:d.hasZ,_=d.geometryType,E=s.objectIdField||("number"===d.objectIdFieldType?d.objectIdFieldName:"OBJECTID")||"OBJECTID",T=s.spatialReference||n;let q=s.timeInfo;if("string"===d.objectIdFieldType&&l.push({name:"geojson-layer:unsupported-id-type",message:"Feature ids are of type string and can't be honored."}),f===d.fields&&d.unknownFields.length>0&&l.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:d.unknownFields}}),E){let e=null;f.some((t=>t.name===E&&(e=t,!0)))?(e.type="esriFieldTypeOID",e.editable=!1,e.nullable=!1):f.unshift({alias:E,name:E,type:"esriFieldTypeOID",editable:!1,nullable:!1})}for(const e of f){if(null==e.name&&(e.name=e.alias),null==e.alias&&(e.alias=e.name),!e.name)throw new t("geojson-layer:invalid-field-name","field name is missing",{field:e});if(e.name===E&&(e.type="esriFieldTypeOID"),-1===w.jsonValues.indexOf(e.type))throw new t("geojson-layer:invalid-field-type",`invalid type for field "${e.name}"`,{field:e})}const O={};this._requiredFields=[];for(const e of f)if("esriFieldTypeOID"!==e.type&&"esriFieldTypeGlobalID"!==e.type){e.editable=null==e.editable||!!e.editable,e.nullable=null==e.nullable||!!e.nullable;const t=R(e);e.nullable||void 0!==t?O[e.name]=t:this._requiredFields.push(e)}if(this._fieldsIndex=new x(f),q){if(q.startTimeField){const e=this._fieldsIndex.get(q.startTimeField);e?(q.startTimeField=e.name,e.type="esriFieldTypeDate"):q.startTimeField=null}if(q.endTimeField){const e=this._fieldsIndex.get(q.endTimeField);e?(q.endTimeField=e.name,e.type="esriFieldTypeDate"):q.endTimeField=null}if(q.trackIdField){const e=this._fieldsIndex.get(q.trackIdField);e?q.trackIdField=e.name:(q.trackIdField=null,l.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:q}}))}q.startTimeField||q.endTimeField||(l.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:q}}),q=null)}const S=_?I(_):null,Q={warnings:l,featureErrors:[],layerDefinition:{...D,drawingInfo:S,templates:F(O),extent:null,geometryType:_,objectIdField:E,fields:f,hasZ:!!j,timeInfo:q}};this._queryEngine=new m({fields:f,geometryType:_,hasM:!1,hasZ:j,objectIdField:E,spatialReference:T,timeInfo:q,featureStore:new p({geometryType:_,hasM:!1,hasZ:j}),cacheSpatialQueries:!0}),this._createDefaultAttributes=b(O,E),this._nextObjectId=d.maxObjectId+1;const k=g(u,{geometryType:_,hasZ:j,objectIdField:"number"===d.objectIdFieldType?E:null});if(!r(T,n))for(const e of k)i(e.geometry)&&(e.geometry=a(y(o(e.geometry,_,j,!1),n,T)));return this._loadInitialFeatures(Q,k),Q}async applyEdits(e){const{spatialReference:t,geometryType:i}=this._queryEngine;return await Promise.all([j(t,i),f(e.adds,t),f(e.updates,t)]),this._applyEdits(e)}queryFeatures(e={},t={}){return this._queryEngine.executeQuery(e,t.signal)}queryFeatureCount(e={},t={}){return this._queryEngine.executeQueryForCount(e,t.signal)}queryObjectIds(e={},t={}){return this._queryEngine.executeQueryForIds(e,t.signal)}queryExtent(e={},t={}){return this._queryEngine.executeQueryForExtent(e,t.signal)}querySnapping(e,t={}){return this._queryEngine.executeQueryForSnapping(e,t.signal)}_loadInitialFeatures(e,t){const{featureStore:i,objectIdField:s}=this._queryEngine,n=[];for(const r of t){const t=this._createDefaultAttributes(),i=_(this._fieldsIndex,t,r.attributes,this._requiredFields,!0,e.warnings);i?e.featureErrors.push(i):(this._assignObjectId(t,r.attributes,!0),r.attributes=t,r.objectId=t[s],n.push(r))}if(i.addMany(n),e.layerDefinition.extent=this._queryEngine.fullExtent,e.layerDefinition.timeInfo){const{start:t,end:i}=this._queryEngine.timeExtent;e.layerDefinition.timeInfo.timeExtent=[t,i]}return e}_applyEdits(e){const{adds:t,updates:i,deletes:s}=e,n={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(n,t),i&&i.length&&this._applyUpdateEdits(n,i),s&&s.length){for(const e of s)n.deleteResults.push(E(e));this._queryEngine.featureStore.removeManyById(s)}return{fullExtent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent,featureEditResults:n}}_applyAddEdits(e,t){const{addResults:n}=e,{geometryType:r,hasM:a,hasZ:o,objectIdField:u,spatialReference:d,featureStore:p}=this._queryEngine,f=[];for(const l of t){if(l.geometry&&r!==s(l.geometry)){n.push(T("Incorrect geometry type."));continue}const t=this._createDefaultAttributes(),a=_(this._fieldsIndex,t,l.attributes,this._requiredFields);if(a)n.push(a);else{if(this._assignObjectId(t,l.attributes),l.attributes=t,null!=l.uid){const t=l.attributes[u];e.uidToObjectId[l.uid]=t}i(l.geometry)&&(l.geometry=y(q(l.geometry,d),l.geometry.spatialReference,d)),f.push(l),n.push(E(l.attributes[u]))}}p.addMany(l([],f,r,o,a,u))}_applyUpdateEdits({updateResults:e},t){const{geometryType:n,hasM:r,hasZ:a,objectIdField:o,spatialReference:l,featureStore:p}=this._queryEngine;for(const f of t){const{attributes:t,geometry:m}=f,c=t&&t[o];if(null==c){e.push(T(`Identifier field ${o} missing`));continue}if(!p.has(c)){e.push(T(`Feature with object id ${c} missing`));continue}const h=u(p.getFeature(c),n,a,r);if(i(m)){if(n!==s(m)){e.push(T("Incorrect geometry type."));continue}h.geometry=y(q(m,l),m.spatialReference,l)}if(t){const i=_(this._fieldsIndex,h.attributes,t,this._requiredFields);if(i){e.push(i);continue}}p.add(d(h,n,a,r,o)),e.push(E(c))}}_assignObjectId(e,t,i=!1){const s=this._queryEngine.objectIdField;i&&isFinite(t[s])?e[s]=t[s]:e[s]=this._nextObjectId++}async _checkProjection(e){try{await f(n,e)}catch{throw new t("geojson-layer","Projection not supported")}}}export{O as default};
