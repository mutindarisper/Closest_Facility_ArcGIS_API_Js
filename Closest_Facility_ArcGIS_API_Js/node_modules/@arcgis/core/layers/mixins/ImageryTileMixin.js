/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../geometry.js";import{rasterRendererTypes as t}from"../../rasterRenderers.js";import r from"../../request.js";import i from"../../core/Logger.js";import{isNone as s,isSome as n}from"../../core/maybe.js";import{aliasOf as o}from"../../core/accessorSupport/decorators/aliasOf.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import{subclass as l}from"../../core/accessorSupport/decorators/subclass.js";import{getInfo as d}from"../../geometry/support/spatialReferenceUtils.js";import{sanitizeUrl as m}from"../support/arcgisLayerUrl.js";import{url as p}from"../support/commonProperties.js";import h from"../support/DimensionalDefinition.js";import u from"../support/RasterJobHandler.js";import c from"../support/TileInfo.js";import{convertVectorFieldData as f}from"../support/rasterFunctions/vectorFieldUtils.js";import{normalizeRendererJSON as y,getDefaultInterpolation as b,getDefaultBandCombination as g,createDefaultRenderer as I}from"../../renderers/support/rasterRendererHelper.js";import _ from"../../renderers/support/RasterSymbolizer.js";import J from"../../geometry/Extent.js";import v from"../../geometry/SpatialReference.js";const S=i.getLogger("esri.layers.mixins.ImageryTileMixin"),x=i=>{let x=class extends i{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.fullExtent=null,this.interpolation="nearest",this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.tileInfo=null,this.symbolizer=null}set multidimensionalDefinition(e){this.raster&&(this._sliceId=this.raster.getSliceIndex(e)),this._set("multidimensionalDefinition",e)}set url(e){this._set("url",m(e,S))}set renderer(e){this._set("renderer",e),this.updateRenderer()}async convertVectorFieldData(e,t){if(s(e))return null;const r=this._rasterJobHandler.instance,i=this.rasterInfo.dataType;return r?r.convertVectorFieldData({pixelBlock:e,dataType:i},t):f(e,i)}async updateRenderer(){if(!this.loaded)return;if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const e=this._rasterJobHandler.instance;e&&(this.symbolizer.rendererJSON=y(this.renderer.toJSON()),this.symbolizer.bind(),await e.updateSymbolizer(this.symbolizer),this._cachedRendererJson=this.renderer.toJSON())}async applyRenderer(e,t){const r=e&&e.pixelBlock;if(!(n(r)&&r.pixels&&r.pixels.length>0))return null;let i;await this.updateRenderer();const s=this._rasterJobHandler.instance,{bandIds:o}=this;return i=s?await s.symbolize({...e,simpleStretchParams:t,bandIds:o}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:o}),i}getTileUrl(e,t,r){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${r}`:""}getCompatibleTileInfo(e,t,r=!1){if(!this.loaded)return null;if(r&&e.equals(this.spatialReference))return this.tileInfo;const i=d(e);return c.create({size:256,spatialReference:e,origin:i?{x:i.origin[0],y:i.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,i,s={}){if(s.requestAsImageElement){const n=this.getTileUrl(e,t,i);return r(n,{responseType:"image",query:{sliceId:this._sliceId,...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:s.signal}).then((e=>e.data))}await this._initJobHandler();const n="raster-shaded-relief"===this.renderer.type?{cols:1,rows:1}:null;if(this.multidimensionalDefinition){const e=this._sliceId;s={multidimensionalDefinition:this.multidimensionalDefinition,sliceId:e,buffer:n,...s}}return this.raster.fetchTile(e,t,i,s)}async fetchPixels(e,t,r,i){if(await this._initJobHandler(),this.multidimensionalDefinition){const e=this._sliceId;i={multidimensionalDefinition:this.multidimensionalDefinition,sliceId:e,...i}}return this.raster.fetchPixels(e,t,r,i)}identify(e,t={}){return this.multidimensionalDefinition&&!t.multidimensionalDefinition&&(t={...t,multidimensionalDefinition:this.multidimensionalDefinition}),this.raster.identify(e,t)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){var e;const t=this.rasterInfo.multidimensionalInfo;if(!n(t)||"standard-time"!==this.rasterInfo.dataType)return!1;const r=null==(e=this.multidimensionalDefinition[0])?void 0:e.variableName;return t.variables.some((e=>e.name===r&&e.dimensions.some((e=>"StdTime"===e.name))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}_configDefaultSettings(){this._configDefaultInterpolation(),this._configDefaultSlice(),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new u;return this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,this.renderer&&this.updateRenderer()})).catch((()=>null)),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this.raster.rasterJobHandler=null}_configDefaultInterpolation(){if(null==this.interpolation){var e;const t=b(this.rasterInfo,this.raster.tileType,null==(e=this.sourceJSON)?void 0:e.defaultResamplingMethod);this._set("interpolation",t)}}_configDefaultSlice(){const{multidimensionalInfo:e}=this.raster.rasterInfo;if(n(e)){if(!this.multidimensionalDefinition){const t=e.variables[0],r=[];t.dimensions.forEach((e=>{r.push(new h({variableName:t.name,dimensionName:e.name,values:e.hasRegularIntervals?e.extent[0]:e.values[0],isSlice:!0}))})),this.multidimensionalDefinition=r}this._sliceId=this.raster.getSliceIndex(this.multidimensionalDefinition)}}_configDefaultRenderer(){const e=this.raster.rasterInfo;var t,r;(this.bandIds||(this.bandIds=g(e)),this.renderer)||(this.renderer=I(e,{bandIds:this.bandIds,variableName:null==(t=this.multidimensionalDefinition)||null==(r=t[0])?void 0:r.variableName}));this.symbolizer?(this.symbolizer.rendererJSON=y(this.renderer.toJSON()),this.symbolizer.rasterInfo=e):this.symbolizer=new _({rendererJSON:this.renderer.toJSON(),rasterInfo:e}),this.symbolizer.bind()||S.warn("imagery-tile-mixin","The given renderer is not supported by the layer.")}};return e([a()],x.prototype,"_cachedRendererJson",void 0),e([a()],x.prototype,"_sliceId",void 0),e([a()],x.prototype,"_compatibleFullExtent",void 0),e([a()],x.prototype,"_rasterJobHandler",void 0),e([a()],x.prototype,"bandIds",void 0),e([a()],x.prototype,"copyright",void 0),e([a({type:J}),o("rasterInfo.extent")],x.prototype,"fullExtent",void 0),e([a()],x.prototype,"interpolation",void 0),e([a()],x.prototype,"ioConfig",void 0),e([a({type:[h]})],x.prototype,"multidimensionalDefinition",null),e([a()],x.prototype,"raster",void 0),e([a({readOnly:!0}),o("raster.rasterInfo")],x.prototype,"rasterInfo",void 0),e([a()],x.prototype,"sourceJSON",void 0),e([a({type:v}),o("rasterInfo.spatialReference")],x.prototype,"spatialReference",void 0),e([a({type:c}),o("rasterInfo.storageInfo.tileInfo")],x.prototype,"tileInfo",void 0),e([a(p)],x.prototype,"url",null),e([a({types:t})],x.prototype,"renderer",null),e([a()],x.prototype,"symbolizer",void 0),x=e([l("esri.layers.ImageryTileMixin")],x),x};export{x as ImageryTileMixin};
