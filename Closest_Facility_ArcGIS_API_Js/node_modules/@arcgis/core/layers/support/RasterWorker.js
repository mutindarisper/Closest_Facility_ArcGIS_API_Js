/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import"../../geometry.js";import{isSome as e}from"../../core/maybe.js";import r from"./PixelBlock.js";import{decode as o}from"./rasterFormats/RasterCodec.js";import{estimateStatisticsHistograms as t,split as s,mosaic as i,approximateTransform as m}from"./rasterFunctions/pixelUtils.js";import{convertVectorFieldData as l}from"./rasterFunctions/vectorFieldUtils.js";import n from"../../renderers/support/RasterSymbolizer.js";import c from"../../geometry/Extent.js";class a{convertVectorFieldData(o){const t=r.fromJSON(o.pixelBlock),s=l(t,o.type);return Promise.resolve(e(s)&&s.toJSON())}async decode(e){const r=await o(e.data,e.options);return r&&r.toJSON()}symbolize(o){o.pixelBlock=r.fromJSON(o.pixelBlock),o.extent=o.extent?c.fromJSON(o.extent):null;const t=this.symbolizer.symbolize(o);return Promise.resolve(e(t)&&t.toJSON())}async updateSymbolizer(e){var r;this.symbolizer=n.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===(null==(r=this.symbolizer)?void 0:r.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(o){const t=this.symbolizer.simpleStretch(r.fromJSON(o.srcPixelBlock),o.stretchParams);return Promise.resolve(e(t)&&t.toJSON())}estimateStatisticsHistograms(e){const o=t(r.fromJSON(e.srcPixelBlock));return Promise.resolve(o)}split(e){const o=s(r.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return o&&o.forEach(((e,r)=>{o.set(r,null==e?void 0:e.toJSON())})),Promise.resolve(o)}async mosaicAndTransform(e){const o=e.srcPixelBlocks.map((e=>e?new r(e):null)),t=i(o,e.srcMosaicSize,null,null,e.alignmentInfo);if(!e.coefs)return t&&t.toJSON();const s=m(t,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return s&&s.toJSON()}}export{a as default};
