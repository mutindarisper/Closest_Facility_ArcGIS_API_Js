/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import e from"../request.js";import r from"../core/Error.js";import{isSome as t}from"../core/maybe.js";import{getDeepValue as o}from"../core/object.js";import{removeTrailingSlash as s}from"../core/urlUtils.js";import{asValidOptions as a,parseUrl as l}from"./utils.js";import n from"./support/NetworkServiceDescription.js";import i from"./support/RouteResultsContainer.js";function u(e,r,t,o){o[t]=[r.length,r.length+e.length],e.forEach((e=>{r.push(e.geometry)}))}function p(e,r){for(let t=0;t<r.length;t++){const o=e[r[t]];if(o&&o.length)for(const e of o)e.z=void 0}console.log("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")}function f(e){const r=[],o=[],{directions:s=[],routes:{features:a=[],spatialReference:l=null}={},stops:{features:n=[],spatialReference:u=null}={},barriers:p,polygonBarriers:f,polylineBarriers:d,messages:c}=e.data,v="esri.tasks.RouteTask.NULL_ROUTE_NAME";let m,h,T=!0;const g=a&&l||n&&u||p&&p.spatialReference||f&&f.spatialReference||d&&d.spatialReference;s.forEach((e=>{r.push(m=e.routeName),o[m]={directions:e}})),a.forEach((e=>{-1===r.indexOf(m=e.attributes.Name)&&(r.push(m),o[m]={}),t(e.geometry)&&(e.geometry.spatialReference=g),o[m].route=e})),n.forEach((e=>{h=e.attributes,-1===r.indexOf(m=h.RouteName||v)&&(r.push(m),o[m]={}),m!==v&&(T=!1),t(e.geometry)&&(e.geometry.spatialReference=g),null==o[m].stops&&(o[m].stops=[]),o[m].stops.push(e)})),n.length>0&&!0===T&&(o[r[0]].stops=o[v].stops,delete o[v],r.splice(r.indexOf(v),1));const M=r.map((e=>(o[e].routeName=e===v?null:e,o[e])));return i.fromJSON({routeResults:M,pointBarriers:p,polygonBarriers:f,polylineBarriers:d,messages:c})}function d(e,r){for(let o=0;o<r.length;o++){const s=e[r[o]];if(s&&s.length)for(const e of s)if(t(e)&&e.hasZ)return!0}return!1}async function c(t,o,s){if(!t)throw new r("network-service:missing-url","Url to Network service is missing");const l=a({f:"json",token:o},s),{data:i}=await e(t,l);i.supportedTravelModes||(i.supportedTravelModes=[]);for(let e=0;e<i.supportedTravelModes.length;e++)i.supportedTravelModes[e].id||(i.supportedTravelModes[e].id=i.supportedTravelModes[e].itemId);const u=i.currentVersion>=10.4?m(t,o,s):v(t,s),{defaultTravelMode:p,supportedTravelModes:f}=await u;return i.defaultTravelMode=p,i.supportedTravelModes=f,n.fromJSON(i)}async function v(r,t){var n,i;const u=a({f:"json"},t),{data:p}=await e(r.replace(/\/rest\/.*$/i,"/info"),u);if(!p||!p.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};const{owningSystemUrl:f}=p,d=s(f)+"/sharing/rest/portals/self",{data:c}=await e(d,u),v=o("helperServices.routingUtilities.url",c);if(!v)return{supportedTravelModes:[],defaultTravelMode:null};const m=l(f),h=/\/solve$/i.test(m.path)?"Route":/\/solveclosestfacility$/i.test(m.path)?"ClosestFacility":"ServiceAreas",T=a({f:"json",serviceName:h},t),g=s(v)+"/GetTravelModes/execute",M=await e(g,T),w=[];let y=null;if(null!=M&&null!=(n=M.data)&&null!=(i=n.results)&&i.length){const e=M.data.results;for(const r of e){var N;if("supportedTravelModes"===r.paramName){if(null!=(N=r.value)&&N.features)for(const{attributes:e}of r.value.features)if(e){const r=JSON.parse(e.TravelMode);w.push(r)}}else"defaultTravelMode"===r.paramName&&(y=r.value)}}return{supportedTravelModes:w,defaultTravelMode:y}}async function m(t,o,l){try{const r=a({f:"json",token:o},l),n=s(t)+"/retrieveTravelModes",{data:{supportedTravelModes:i,defaultTravelMode:u}}=await e(n,r);return{supportedTravelModes:i,defaultTravelMode:u}}catch(n){throw new r("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:n})}}export{u as collectGeometries,p as dropZValuesOffInputGeometry,c as fetchServiceDescription,f as handleSolveResponse,d as isInputGeometryZAware};
