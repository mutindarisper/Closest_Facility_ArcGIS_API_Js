/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import{pickRandom as t}from"../../../core/arrayUtils.js";import a from"../../../core/Error.js";import r from"../../../core/Logger.js";import{unwrap as i}from"../../../core/maybe.js";import{createAbortController as s,timeout as n,eachAlways as o,throwIfAborted as l}from"../../../core/promiseUtils.js";import{whenFalseOnce as u}from"../../../core/watchUtils.js";import{property as m}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as c}from"../../../core/accessorSupport/decorators/subclass.js";import{toQuantizationTransform as p,quantizePoint as d}from"../../../geometry/support/quantizationUtils.js";import{isWrappable as h,getInfo as y}from"../../../geometry/support/spatialReferenceUtils.js";import{isHostedAgolService as f}from"../../../layers/support/arcgisLayerUrl.js";import{isStringField as F,isNumericField as g,isDateField as v}from"../../../layers/support/fieldUtils.js";import w from"../../../rest/support/GenerateRendererParameters.js";import S from"../../../rest/support/QuantizationParameters.js";import x from"../../../rest/support/StatisticDefinition.js";import _ from"../../../rest/support/UniqueValueDefinition.js";import{getArcadeForPredominantCategory as z,getSQLForPredominantCategoryName as q}from"../../statistics/support/predominanceUtils.js";import{getRangeExpr as E,getSQLFilterForNormalization as T,mergeWhereClauses as V,isNullCountSupported as L}from"../../statistics/support/utils.js";import{WorkerClient as j}from"../../statistics/support/WorkerClient.js";import{getFieldsList as Q}from"../utils.js";import M from"./LayerAdapter.js";import{ensureFeaturesJSON as B,processSummaryStatisticsResult as b,msSinceUnixEpochSQL as P,getFieldExpr as C,statisticTypes as R,getSummaryStatisticsFromFeatureSet as k,calculateStatsFromMemory as N,getMissingFields as I,createUVResult as O,getUniqueValuesFromFeatureSet as D,calculateUniqueValuesFromMemory as G,getEqualIntervalBins as U,getHistogramFromFeatureSet as A,createCBDefn as J,generateBinParams as $,calculateHistogramFromMemory as W,resolveCBResult as Z,calculateClassBreaksFromMemory as H,calculateHeatmapStats as K,getPredominantCategoriesFromUVInfos as X}from"./support/utils.js";import Y from"../../../tasks/GenerateRendererTask.js";import ee from"../../../geometry/Point.js";const te=r.getLogger("esri.smartMapping.support.adapters.FeatureLayerAdapter"),ae=5,re=10,ie=2e4,se=4e5;let ne=class extends M{constructor(e){super(e)}destroy(){var e;this._hasLocalSource=null,null==(e=this.workerClient)||e.destroy()}_isStatsSupportedOnService(){const e=this.layer;return!e.get("capabilities.query.supportsStatistics")||"multipatch"===this.geometryType&&!f(e.url)&&e.version<10.5?Promise.reject(new a("feature-layer-adapter:not-supported","Layer does not support statistics query")):Promise.resolve()}async _waitForLayerViewUpdate(e){if(!e)throw new a("feature-layer-adapter:insufficient-data","layerView is required to fetch the features");const t=s(),r=u(e,"updating",t.signal);await n(r,5e3,t).catch((e=>{throw te.warn("LayerView is taking too long to update. Aborting fetch from layerView."),e}))}async _fetchFeaturesFromMemory(e,t,a,r){const i=this.layer,s="json"===r;if(this._hasLocalSource){const e=await i.queryFeatures(t);return s?B(e.features):e.features}if(await this._waitForLayerViewUpdate(e),s&&"queryFeaturesJSON"in e&&e.queryFeaturesJSON){const{features:r}=await e.queryFeaturesJSON(t,{signal:a});return r}const n=await e.queryFeatures(t,{signal:a});return s?B(n.features):n.features}_fetchFeaturesFromService(e,t){return this.layer.queryFeatures(e,{signal:t}).then((e=>e.features))}_fetchFeaturesJSONFromService(e,t){return this._fetchFeaturesFromService(e,t).then(B)}_fetchFeaturesForStats(e,t){return Q({field:e.field,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,requiredFields:a,signal:e.signal},t)))}_summaryStatsFromGenRend(e){const t=e.normalizationType,a=e.normalizationField;return this.classBreaks({field:e.field,numClasses:ae,classificationMethod:"standard-deviation",standardDeviationInterval:.25,normalizationType:t,normalizationField:"field"===t?a:void 0,minValue:e.minValue,maxValue:e.maxValue,signal:e.signal}).then((e=>{let t,a,r;if(e.classBreakInfos.some((e=>(e.hasAvg&&(t=e),!!t))),t){const e=t.maxValue-t.minValue;a=t.minValue+e/2,r=4*e}const i={min:e.minValue,max:e.maxValue,avg:a,stddev:r};return b(i)}))}_getSummaryStatsQuery(e,t){const{field:a,normalizationType:r,normalizationField:i,normalizationTotal:s,minValue:n,maxValue:o}=e,l=this.supportsSQLExpression&&t?P(this,a):e.sqlExpression,u=C({field:a,normalizationType:r,normalizationField:i,normalizationTotal:s,layer:this}),m=l||u,c=m?E(m,n,o):null,p=T({field:a,normalizationField:i,normalizationType:r}),d=V(e.sqlWhere,p),h=V(d,c),y=L({normalizationField:i,normalizationType:r,sqlExpression:l,supportsSQLExpression:this.supportsSQLExpression,minValue:n,maxValue:o}),f=F(this.getField(a)),g=R.filter((e=>"nullcount"===e?y:!f||"count"===e)),v=this.layer.createQuery();return v.where=V(v.where,h),v.sqlFormat=l?"standard":null,v.outStatistics=g.map((e=>{const t=new x;let a=null,r=null,i=`${e}_value`;return"variance"===e?(a="var",r=m):"nullcount"===e?(a="count",r=this.layer.objectIdField,i="totalcount_value"):(a=e,r=m),t.statisticType=a,t.onStatisticField=r,t.outStatisticFieldName=i,t})),v}async _summaryStatsFromServiceQuery(e,t){await this._isStatsSupportedOnService(),"percent-of-total"===e.normalizationType&&(e.normalizationTotal=await this._getNormalizationTotal(e.field,e.normalizationType));const a=this._getSummaryStatsQuery(e,t),r=await this.layer.queryFeatures(a,{signal:e.signal}),i=k(r,t);return b(i)}async _summaryStatsFromClientQuery(e,t){const a=this._getSummaryStatsQuery(e,t),r=await this.layer.queryFeatures(a,{signal:e.signal}),i=k(r,t);return b(i)}async _summaryStatsFromMemory(e,t){const{view:r,field:i,normalizationType:s,features:n,signal:o}=e;if(n){const r={...e};if("percent-of-total"===s){const e=(await N({field:i},n)).sum;if(null==e)throw new a("feature-layer-adapter:invalid","invalid normalizationTotal");r.normalizationTotal=e}const o=await N(r,n,"date"===(null==t?void 0:t.type));return b(o)}const{featuresJSON:l,layerView:u,query:m}=await this._processStatsFromMemoryParams(e),c={field:i,valueExpression:e.valueExpression,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue};var p;e.valueExpression&&r&&l&&(c.fieldType=null==t?void 0:t.type,c.viewInfoParams={viewingMode:"2d"===r.type?"map":r.viewingMode,scale:r.scale,spatialReference:null==(p=r.spatialReference)?void 0:p.toJSON()});if("percent-of-total"===s&&null==e.normalizationTotal){const e=(!l&&u&&"querySummaryStatistics"in u&&u.querySummaryStatistics?await u.querySummaryStatistics(m,{field:i},{signal:o}):await this.workerClient.summaryStatistics({field:i},l)).sum;if(null==e)throw new a("feature-layer-adapter:invalid","invalid normalizationTotal");c.normalizationTotal=e}const d=!l&&u&&"querySummaryStatistics"in u&&u.querySummaryStatistics?await u.querySummaryStatistics(m,c,{signal:o}):await this.workerClient.summaryStatistics(c,l);return b(d)}async _processStatsFromMemoryParams(e){if(!e.view)throw new a("feature-layer-adapter:insufficient-data","View is required to fetch the features");const{view:t,field:r,normalizationField:i,valueExpression:s,signal:n}=e,o=await t.whenLayerView(this.layer);let l="querySummaryStatistics"in o&&"function"==typeof o.querySummaryStatistics,u=null,m=null;if(l)try{await this._waitForLayerViewUpdate(o);const e=await Q({field:r,normalizationField:i,valueExpression:s});(await I(this,e,o)).length?l=!1:(u=this.layer.createQuery(),u.outFields=e,u.returnGeometry=!1),o.suspended&&(l=!1)}catch{l=!1}var c;if(!l&&(m=await this._fetchFeaturesForStats({field:r,valueExpression:s,normalizationField:i,view:t,signal:n},"json"),null==(c=m)||!c.length))throw new a("feature-layer-adapter:insufficient-data","No features are available to calculate statistics");return{layerView:o,query:u,featuresJSON:m}}_uvFromGenRenderer(e,t){const a=e.field,r=new _;r.attributeField=a;const i=new w;return i.classificationDefinition=r,this.generateRenderer(i,e.signal).then((e=>{const t={},r=this.getField(a);return e.uniqueValues.forEach((e=>{let a=e.value;null!=a&&""!==a&&("string"!=typeof a||""!==a.trim()&&"<null>"!==a.toLowerCase())||(a=null),null==t[a]?t[a]={count:e.count,data:g(r)&&a?Number(a):a}:t[a].count=t[a].count+e.count})),{count:t}})).then((a=>O(a,t,e.returnAllCodedValues)))}_getUVQuery(e){const t=e.field,a=e.sqlExpression,r="countOF"+(t||"Expr"),i=new x;i.statisticType="count",i.onStatisticField=a?"1":t,i.outStatisticFieldName=r;const s=this.layer.createQuery();return s.where=V(s.where,e.sqlWhere),s.sqlFormat=a?"standard":null,s.outStatistics=[i],s.groupByFieldsForStatistics=[t||a],s}_uvFromServiceQuery(e,t){return this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(this._getUVQuery(e),{signal:e.signal}))).then((t=>D(t,this,e.field,e.view,null,e.signal))).then((a=>O(a,t,e.returnAllCodedValues)))}async _uvFromClientQuery(e,t){const{signal:a}=e,r=this._getUVQuery(e),i=await this.layer.queryFeatures(r,{signal:a}),s=await D(i,this,e.field,e.view,null,a);return O(s,t,e.returnAllCodedValues)}async _uvFromMemory(e,t){const{field:a,valueExpression:r,view:i,signal:s}=e,n={field:a,valueExpression:r,view:i,signal:s},o=e.features?e.features:await this._fetchFeaturesForStats(n);return G(e,o,t)}_calcBinsSQL(e,t,a){const r=[],i=t.length;return t.forEach(((t,s)=>{const[n,o]=t;let l=null;l=0!==s||a?s!==i-1||a?V(`${e} >= ${n}`,`${e} ${s===i-1?" <= ":" < "} ${o}`):`${e} >= ${n}`:`${e} < ${o}`,r.push("WHEN ("+l+") THEN "+(s+1))})),["CASE",r.join(" "),"ELSE 0","END"].join(" ")}_getNormalizationTotal(e,t,a){return e&&"percent-of-total"===t?this.summaryStatistics({field:e,signal:a}).then((e=>e.sum)):Promise.resolve(null)}_getQueryParamsForExpr(e,t){const a=e.valueExpression||e.sqlExpression,r=e.signal;if(!a){const{field:a,normalizationType:i,normalizationField:s}=e,n=a?this.getField(a):null,o=v(n),l={field:a,normalizationType:i,normalizationField:s,normalizationTotal:t,layer:this};return{sqlExpression:o?P(this,a):C(l),sqlWhere:o?null:e.sqlWhere||T({field:a,normalizationType:i,normalizationField:s}),signal:r}}return{valueExpression:e.valueExpression,sqlExpression:e.sqlExpression,sqlWhere:e.sqlWhere,signal:r}}_getDataRange(e,t,a){return null!=t&&null!=a?Promise.resolve({min:t,max:a}):this.summaryStatistics(e).then((e=>({min:e.min,max:e.max})))}_histogramForExpr(e){return this._getNormalizationTotal(e.field,e.normalizationType,e.signal).then((t=>{const a=this._getQueryParamsForExpr(e,t);return this._getDataRange(a,e.minValue,e.maxValue).then((r=>{const{min:i,max:s}=r,n=e.numBins||re,o=U(i,s,n),l=this._calcBinsSQL(a.sqlExpression,o,null!=e.minValue&&null!=e.maxValue),u=new x({statisticType:"count",outStatisticFieldName:"countOFExpr",onStatisticField:"1"}),m=this.layer.createQuery();return m.where=V(m.where,a.sqlWhere),m.sqlFormat="standard",m.outStatistics=[u],m.groupByFieldsForStatistics=[l],m.orderByFields=[l],this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(m,{signal:a.signal}))).then((e=>A(e,i,s,n,t)))}))}))}_histogramForField(e){let t=null;return t=null!=e.minValue&&null!=e.maxValue?Promise.resolve({min:e.minValue,max:e.maxValue}):this.summaryStatistics(e).then((e=>{if(!e.count)throw new a("feature-layer-adapter:insufficient-data","Either the layer has no features or none of the features have data for the field");return{min:e.min,max:e.max}})),t.then((t=>this._getBins({min:t.min,max:t.max},e.field,e.numBins,e.view,e.signal)))}_getBins(e,t,a=re,r,i){const{min:s,max:n,normTotal:o,excludeZerosExpr:l}=e,u=e.intervals||U(s,n,a),m=e.sqlExpr||t;return this._queryBins(u,m,l,r,i).then((e=>({bins:e.map(((e,t)=>({minValue:u[t][0],maxValue:u[t][1],count:e.value}))),minValue:s,maxValue:n,normalizationTotal:o})))}_queryBins(e,t,a,r,i){const s=[],n=e.length;for(let o=0;o<n;o++){const r=V(a,V(t+" >= "+e[o][0],null!==e[o][1]?t+(o===n-1?" <= ":" < ")+e[o][1]:""));s.push(r)}return o(s.map((e=>this.queryFeatureCount({whereClause:e,view:r,signal:i}))))}_binParamsFromGenRend(e,t){const{field:a,normalizationType:r,normalizationField:i,signal:s}=e,n=T({field:a,normalizationType:r,normalizationField:i}),o=new w({classificationDefinition:J({field:a,normalizationType:r,normalizationField:i,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numBins||re}),where:V(n,t)});return this.generateRenderer(o,s).then((e=>{const{normalizationTotal:t,classBreaks:s}=e;return $({field:a,normalizationType:r,normalizationField:i,normalizationTotal:t,classBreaks:s,where:n,layer:this})}))}_histogramFromMemory(e){const{field:t,normalizationField:r,normalizationType:i,valueExpression:s,classificationMethod:n,minValue:o,maxValue:l,view:u,signal:m}=e,c={field:t,valueExpression:s,normalizationField:r,view:u,signal:m};return(e.features?Promise.resolve(e.features):this._fetchFeaturesForStats(c)).then((r=>{if(!(r&&r.length))throw new a("feature-layer-adapter:insufficient-data","No features are available to calculate histogram");let c=null;if((!n||"equal-interval"===n)&&!i)c=null!=o&&null!=l?Promise.resolve({min:o,max:l,source:"parameters"}):this.summaryStatistics({field:t,valueExpression:s,features:r,view:u,signal:m}).then((e=>e.count?{min:e.min,max:e.max}:Promise.reject(new a("feature-layer-adapter:insufficient-data","No features are available to calculate histogram"))));else{const t={...e};t.features=r,c=this._getBinParamsFromMemory(t)}return c.then((t=>W(e,t,r)))}))}async _getBinParamsFromMemory(e){const{field:t,valueExpression:a,classificationMethod:r,standardDeviationInterval:i,normalizationType:s,normalizationField:n,minValue:o,maxValue:l,features:u,view:m,signal:c}=e;return this._classBreaksFromMemory({field:t,valueExpression:a,normalizationType:s,normalizationField:n,classificationMethod:r,standardDeviationInterval:i,minValue:o,maxValue:l,numClasses:e.numBins,features:u,view:m,signal:c}).then((e=>{const a=e.normalizationTotal,r=e.classBreakInfos,i=T({field:t,normalizationType:s,normalizationField:n});return $({field:t,normalizationType:s,normalizationField:n,normalizationTotal:a,classBreaks:r,where:i,layer:this})}))}_classBreaksFromGenRend(e){const{field:t,normalizationType:a,normalizationField:r,normalizationTotal:i,signal:s}=e,n=T({field:t,normalizationType:a,normalizationField:r}),o=C({field:t,normalizationType:a,normalizationField:r,normalizationTotal:i,layer:this}),l=E(o,e.minValue,e.maxValue),u=J({field:t,normalizationType:a,normalizationField:r,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numClasses||ae}),m=new w;return m.classificationDefinition=u,m.where=V(n,l),this.generateRenderer(m,s).then((t=>Z(e,t)))}_classBreaksFromInterpolation(e){const{minValue:t,maxValue:a}=e,r=e.numClasses||ae,i=[],s=(a-t)/r;for(let l=0;l<r;l++){const e=t+l*s;i.push({minValue:e,maxValue:e+s})}i[r-1].maxValue=a;const n={classBreaks:i,normalizationTotal:e.normalizationTotal},o=Z(e,n);return Promise.resolve(o)}async _classBreaksFromMemory(e){const{field:t,normalizationField:r,valueExpression:i,view:s,signal:n}=e,o={field:t,valueExpression:i,normalizationField:r,view:s,signal:n},l=e.features||await this._fetchFeaturesForStats(o);if(!(l&&l.length))throw new a("feature-layer-adapter:insufficient-data","No features are available to calculate statistics");const u={...e};if("percent-of-total"===u.normalizationType){const e=(await N({field:t},l)).sum;if(null==e)throw new a("feature-layer-adapter:invalid","invalid normalizationTotal");u.normalizationTotal=e}return H(u,l)}async _heatmapStatsFromMemory(e,t){const{blurRadius:r,field:i,view:s,signal:n}=e,{resolution:o,size:l}=s.state,u=new S({extent:s.extent,tolerance:o}),m=this._quantizeFeatures(e.features||await this._fetchFeaturesForStats({field:i,view:s,returnGeometry:!0,signal:n}),u,s);if(!m||!m.length)return{count:0,min:null,max:null,avg:null,stddev:null};const c=K(m,r,t,i,l[0],l[1]);if(c)return{count:c.count,min:c.min,max:c.max,avg:c.mean,stddev:c.stdDev};throw new a("feature-layer-adapter:invalid","unable to calculate heatmap statistics")}_quantizeFeatures(e,t,a){const r=p(t),{spatialReference:s,size:n}=a,o=h(s)?y(s):null,l=o?Math.round((o.valid[1]-o.valid[0])/r.scale[0]):null;return e.map((e=>{const t=new ee(i(e.geometry));return d(r,t,t,t.hasZ,t.hasM),e.geometry=o?this._wrapPoint(t,l,n[0]):t,e}))}_wrapPoint(e,t,a){return e.x<0?e.x+=t:e.x>a&&(e.x-=t),e}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!0,supportsStatistics:!0}:null}getFieldDomain(e,t){return this.layer.getFieldDomain(e,t)}summaryStatistics(e){const{field:t,normalizationType:r,sqlExpression:i,view:s,features:n}=e,o=t?this.getField(t):null,u=v(o),m=e.valueExpression||i,c=m&&!i,p=this._hasLocalSource||n,d=s&&"3d"===s.type;if(p||c)return c||n||d?this._summaryStatsFromMemory(e,o):this._summaryStatsFromClientQuery(e,u);if(!this.supportsSQLExpression&&(u||m||"natural-log"===r||"square-root"===r))return Promise.reject(new a("feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries"));return(r&&!this.supportsSQLExpression?this._summaryStatsFromGenRend(e):this._summaryStatsFromServiceQuery(e,u)).catch((()=>(l(e.signal),this._summaryStatsFromMemory(e,o))))}uniqueValues(e){const{field:t,valueExpression:a,sqlExpression:r,signal:i}=e,s=(t?this.getField(t):null)&&this.getFieldDomain(t),n=a&&(!r||!this.supportsSQLExpression),o=this._hasLocalSource||e.features||n,u=e.view,m=u&&"3d"===u.type;return o?n||e.features||m?this._uvFromMemory(e,s):this._uvFromClientQuery(e,s):this._uvFromServiceQuery(e,s).catch((t=>(l(i),e.field?this._uvFromGenRenderer(e,s):t))).catch((()=>(l(i),n||e.features||m?this._uvFromMemory(e,s):this._uvFromClientQuery(e,s))))}histogram(e){const{field:t,normalizationType:r,normalizationField:i,classificationMethod:s,view:n,signal:o}=e,l=t?this.getField(t):null,u=v(l),m=e.valueExpression||e.sqlExpression,c=m&&!e.sqlExpression,p=this._hasLocalSource||e.features||c,d=this.supportsSQLExpression,h=!s||"equal-interval"===s,y=e.minValue,f=e.maxValue,F=null!=y&&null!=f,g=e.numBins||re;return p?this._histogramFromMemory(e):(m||d)&&h?d||!m&&"natural-log"!==r&&"square-root"!==r?this._histogramForExpr(e):Promise.reject(new a("feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries")):u&&h?Promise.reject(new a("feature-layer-adapter:not-supported","Normalization and date field are not allowed when layer does not support standardized SQL expression for queries")):r||!h?this._binParamsFromGenRend(e).then((s=>{if(!F)return this._getBins(s,t,g,n,o);if(y>s.max||f<s.min)throw new a("histogram:insufficient-data","Range defined by 'minValue' and 'maxValue' does not intersect available data range of the field");if(h)return this._getBins({min:y,max:f,sqlExpr:s.sqlExpr,excludeZerosExpr:s.excludeZerosExpr},t,g,n,o);{const a={field:t,normalizationType:r,normalizationField:i,normalizationTotal:s.normTotal,layer:this},l=C(a),u=E(l,y,f);return this._binParamsFromGenRend(e,u).then((e=>this._getBins(e,t,g,n,o)))}})):this._histogramForField(e)}classBreaks(e){const t=!1!==e.analyzeData,a=this._hasLocalSource||e.features||e.valueExpression;if(t&&a)return this._classBreaksFromMemory(e);return(t?this._classBreaksFromGenRend(e):this._classBreaksFromInterpolation(e)).catch((()=>(l(e.signal),this._classBreaksFromMemory(e))))}queryFeatureCount(e){if(this._hasLocalSource)return Promise.reject(new a("feature-layer-adapter:not-supported","Layer does not support count query"));const t=this.layer,r=t.createQuery();return r.where=V(r.where,e.whereClause),t.queryFeatureCount(r,{signal:e.signal})}generateRenderer(e,t){const r=this.layer;if(this._hasLocalSource||r.version<10.1)return Promise.reject(new a("feature-layer-adapter:not-supported","Layer does not support generateRenderer operation (requires ArcGIS Server version 10.1+)"));const i=new Y({url:r.parsedUrl.path,source:r.dynamicDataSource,gdbVersion:r.gdbVersion}),s=r.createQuery();return e.where=V(e.where,s.where),i.execute(e,{signal:t})}heatmapStatistics(e){const{field:t,fieldOffset:a,signal:r}=e;return(t&&null==a?this.summaryStatistics({field:t,signal:r}):Promise.resolve(null)).then((t=>{let r=a||0;if(t){const{count:e,min:a,max:i}=t;e?a===i&&0===a?r=1:i<=0?r="abs":a<0&&(r=-1.01*a):r=1}return this._heatmapStatsFromMemory(e,r).then((e=>({...e,summaryStatistics:t,fieldOffset:r})))}))}async predominantCategories(e){if(!this._hasLocalSource&&!this.supportsSQLExpression)throw new a("feature-layer-adapter:not-supported","Layer does not support advanced SQL expressions and standardized queries");const{fields:t,view:r,signal:i}=e,s=z(t),n=q(t),o=r&&this._hasLocalSource?await this._uvFromMemory({valueExpression:s,view:r,signal:i}):await this._uvFromServiceQuery({sqlExpression:n.expression,valueExpression:s,signal:i});return X(o.uniqueValueInfos,t)}async getSampleFeatures(e,a){const{view:r,sampleSize:i,requiredFields:s,returnGeometry:n,signal:o}=e,u=this.layer.createQuery(),m=1,c="json"===a;u.outSpatialReference=e.spatialReference||r&&r.spatialReference,u.returnGeometry=!!n,u.outFields=s;let p=[],d=!1;if(r)try{const e=await r.whenLayerView(this.layer);if(d=!(await I(this,s,e)).length,d&&(p=await this._fetchFeaturesFromMemory(e,u,o,a),p.length&&i>0&&i<=p.length))return t(p,i,m)}catch(h){l(o)}try{if(this._hasLocalSource)return d?p:c?this._fetchFeaturesJSONFromService(u,o):this._fetchFeaturesFromService(u,o);const a=await this.queryFeatureCount({view:r,signal:o}),s=this.layer.capabilities.query.maxRecordCount;let n=-1===i?a:i;if(n=s&&n>s?s:n,a<=p.length||p.length>=s)return p;const l=r.extent.width/r.width/r.scale*se;if(u.maxAllowableOffset=e.resolution||l,a<=n)return c?this._fetchFeaturesJSONFromService(u,o):this._fetchFeaturesFromService(u,o);if(a<=ie){const e=await this.layer.queryObjectIds();return u.objectIds=t(e,n,m),c?this._fetchFeaturesJSONFromService(u,o):this._fetchFeaturesFromService(u,o)}return this.layer.get("capabilities.query.supportsPagination")&&(u.num=Math.min(n,ie)),c?this._fetchFeaturesJSONFromService(u,o):this._fetchFeaturesFromService(u,o)}catch(h){return l(o),p}}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=t.get("capabilities.query.supportsSqlExpression"),this._hasLocalSource=!t.url&&!!t.source,this.hasQueryEngine=this._hasLocalSource,this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent=t.fullExtent,this.workerClient=j.getInstance(),await this.workerClient.open(i(i(e).signal))}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([m({constructOnly:!0})],ne.prototype,"layer",void 0),ne=e([c("esri.smartMapping.support.adapters.FeatureLayerAdapter")],ne);var oe=ne;export{oe as default};
