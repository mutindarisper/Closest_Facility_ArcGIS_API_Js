/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../core/maybe.js";import{isAbortError as t}from"../../../../core/promiseUtils.js";import{PlacementEngine as s}from"./Placement.js";import r from"./TileParser.js";import{TileStatus as i}from"../../tiling/enums.js";class a{constructor(e,t,r,a){this.status=i.INITIALIZED,this.placementEngine=new s,this.tileKey=e,this.refKeys=t,this._workerTileHandler=r,this._styleRepository=a}release(){this.tileKey="",this.refKeys=null,this.status=i.INITIALIZED,this._workerTileHandler=null}async parse(s,r,a){const n=a&&a.signal;if(e(n)){const e=()=>{n.removeEventListener("abort",e),this.status=i.INVALID};n.addEventListener("abort",e)}let o;try{o=await this._parse(s,a)}catch(h){if(t(h))throw h;return{result:[],transferList:[]}}this.status=i.READY;const l=[];for(const e of o){const t=e.serialize();l.push(t)}return{result:l,transferList:l.length<=r&&l}}setObsolete(){this.status=i.INVALID}getLayers(){return this._workerTileHandler.getLayers()}getWorkerTileHandler(){return this._workerTileHandler}async _parse(e,t){const s=e.sourceName2DataAndRefKey;if(0===Object.keys(s).length)return[];this.status=i.MODIFIED;return new r(s,this,t.client,this._styleRepository,e.styleLayerUIDs).parse(t)}}export{a as default};
