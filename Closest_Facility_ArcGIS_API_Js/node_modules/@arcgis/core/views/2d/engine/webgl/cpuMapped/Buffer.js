/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{andThen as t,isSome as i,unwrapOrThrow as s,isNone as e}from"../../../../../core/maybe.js";import r from"../../../../webgl/BufferObject.js";import"../../../../webgl/FramebufferObject.js";import"../../../../../core/has.js";import"../../../../webgl/checkWebGLError.js";import"../../../../webgl/enums.js";import"../../../../../chunks/builtins.js";import"../../../../webgl/renderState.js";import"../../../../webgl/Texture.js";import"../../../../webgl/VertexArrayObject.js";import{FreeList as h}from"./FreeList.js";const n=32767,d=n<<16|n;class u{constructor(t,i,s){const e=new Uint32Array(i*s);this.strideInt=s,this.bufferType=t,this.dirty={start:1/0,end:0},this.gpu=null,this._cpu=e,this.clear()}get elementSize(){return this._cpu.length/this.strideInt}destroy(){t(this.gpu,(t=>t.dispose()))}clear(){this.dirty.start=1/0,this.dirty.end=0,this.freeList=new h({start:0,end:this._cpu.length/this.strideInt}),this.fillPointer=0}ensure(t){if(this.maxAvailableSpace()>=t)return;const s=t*this.strideInt;if(s>this._cpu.length-this.fillPointer){i(this.gpu)&&(this.gpu=null);const t=Math.round(1.5*(this._cpu.length+s)),e=new Uint32Array(t),r=this._cpu.length/this.strideInt,h=t/this.strideInt;this.freeList.free(r,h-r),e.set(this._cpu),this._cpu=e}}set(t,i){this._cpu[t]!==i&&(this._cpu[t]=i,this.dirty.start=Math.min(t,this.dirty.start),this.dirty.end=Math.max(t,this.dirty.end))}getBuffer(){if(!this._cpu2||this._cpu2.length!==this._cpu.length){const t=this._cpu.slice();this._cpu2=t}return this._cpu2.set(this._cpu),this._cpu2}get bufferSize(){return this._cpu.length/this.strideInt}maxAvailableSpace(){return this.freeList.maxAvailableSpace()}insert(t,i,e,r){const h=e*this.strideInt,n=i*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d=new Uint32Array(t,n,h),u=s(this.freeList.firstFit(e),"First fit region must be defined")*this.strideInt,a=h,c=u/this.strideInt-i;if(0!==r)for(let s=0;s<d.length;s++)d[s]+=r;return this._cpu.set(d,u),this.dirty.start=Math.min(this.dirty.start,u),this.dirty.end=Math.max(this.dirty.end,u+a),this.fillPointer=Math.max(this.fillPointer,u+a),c}free(t,i,s){const e=t*this.strideInt,r=(t+i)*this.strideInt;if(!0===s)for(let h=t;h!==t+i;h++)this._cpu[h*this.strideInt]=d;this.dirty.start=Math.min(this.dirty.start,e),this.dirty.end=Math.max(this.dirty.end,r),this.freeList.free(t,i)}upload(t){if(this.dirty.end){if(e(this.gpu))return this.gpu=this._createBuffer(t),this.dirty.start=1/0,void(this.dirty.end=0);this.gpu.setSubData(this._cpu,this.dirty.start,this.dirty.start,this.dirty.end),this.dirty.start=1/0,this.dirty.end=0}}_createBuffer(t){const i=35048;return"index"===this.bufferType?r.createIndex(t,i,this._cpu):r.createVertex(t,i,this._cpu)}}export{u as Buffer};
