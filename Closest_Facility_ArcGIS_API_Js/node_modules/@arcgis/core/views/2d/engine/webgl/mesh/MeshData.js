/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import"../../../tiling/PagedTileQueue.js";import"../../../tiling/TileInfoView.js";import e from"../../../tiling/TileKey.js";import"../../../tiling/TileQueue.js";import"../../../tiling/TileStrategy.js";import{PATCH_PIXEL_BUFFER_ALLOC_SIZE as t,TILE_SIZE as r}from"../definitions.js";import{WGLGeometryType as i}from"../enums.js";import{getStrides as s}from"../Utils.js";import{VertexDataWriter as n}from"./VertexDataWriter.js";import{getDisplayIdTexel as a}from"../../../layers/features/support/AttributeStore.js";import{getPow2NeighborKey as u}from"../../../layers/features/support/tileUtils.js";const h=1,c=2,o=4,l=8,_=16,d=32,p=64,g=128;function x(e){switch(e){case h:case l:case d:return-1;case c:case p:return 0;case o:case _:case g:return 1}}function f(e){switch(e){case h:case c:case o:return-1;case l:case _:return 0;case d:case p:case g:return 1}}const m=h|l|d,y=o|_|g,w=h|c|o,v=d|p|g;class E{constructor(e,t,r,i,s){this._hasDotDensity=!1,this._hasAggregate=!1,this.hasRecords=!1,this._data={self:new Map,neighbors:new Array},this._current={geometryType:0,writer:null,overlaps:0,start:0,insertAfter:0,sortKey:0,id:0,materialKey:0,indexStart:0,vertStart:0,isDotDensity:!1,bufferingEnabled:!1,metricBoxLenPointer:0},this.hint=t,this.tileKey=e,this._hasDotDensity=r,this._hasAggregate=i,this._pixelBufferEnabled=s}get hasAggregates(){return this._hasAggregate}get hasPixelBufferEnabled(){return this._pixelBufferEnabled}serialize(t){const r=[];return r.push(this._serializeTileVertexData(this.tileKey,this.tileKey,this._data.self)),this._data.neighbors.forEach(((i,s)=>{const n=1<<s,a=x(n),h=f(n),c=u(new e(this.tileKey),a,h,t),o=this._serializeTileVertexData(this.tileKey,c.id,i.vertexData);o.message.bufferIds=i.displayIds,r.push(o)})),r}_serializeTileVertexData(e,t,r){var s,n,a,u,h;const c=new Array;return{message:{tileKeyOrigin:e,tileKey:t,data:{[i.MARKER]:null==(s=r.get(i.MARKER))?void 0:s.serialize(c),[i.FILL]:null==(n=r.get(i.FILL))?void 0:n.serialize(c),[i.LINE]:null==(a=r.get(i.LINE))?void 0:a.serialize(c),[i.TEXT]:null==(u=r.get(i.TEXT))?void 0:u.serialize(c),[i.LABEL]:null==(h=r.get(i.LABEL))?void 0:h.serialize(c)}},transferList:c}}featureStart(e,t){this._current.insertAfter=e,this._current.sortKey=t}featureEnd(){}recordStart(e,t,r,i,s){this._current.writer=this._getVertexWriter(r,i),this._current.overlaps=0,this._current.indexStart=this._current.writer.indexCount,this._current.vertStart=this._current.writer.vertexCount,this._current.bufferingEnabled=s,this._current.id=e,this._current.materialKey=t,this._current.geometryType=r,this._current.isDotDensity=!1,this._current.writer.recordStart()}recordCount(){return this._current.writer.recordCount}vertexCount(){return this._current.writer.vertexCount}indexCount(){return this._current.writer.indexCount}vertexEnsureSize(e){this._current.writer.vertexEnsureSize(e)}indexEnsureSize(e){this._current.writer.indexEnsureSize(e)}vertexBounds(e,t,r,i){this._current.bufferingEnabled&&this._addOverlap(e,t,r,i)}vertexWrite(e){this._current.writer.writeVertex(e)}vertexWriteF32(e){this._current.writer.writeVertexF32(e)}vertexEnd(){}vertexWriter(){return this._current.writer.vertexWriter}indexWrite(e){this._current.writer.writeIndex(e)}indexWriter(){return this._current.writer.indexWriter}metricWriter(){return this._current.writer.metricWriter}metricStart(e,t,r,s,n,u,h,c){this._current.writer=this._getVertexWriter(i.LABEL,!1);const o=this._current.writer.metricWriter;o.push(a(e)),o.push(t),o.push(r),o.push(s),o.push(n),o.push(u),o.push(h),o.push(c),o.push(255),this._current.metricBoxLenPointer=o.push(0)}metricEnd(){const e=this._current.writer.metricWriter;0===e.getValue(this._current.metricBoxLenPointer)&&e.seek(e.length-10)}metricBoxWrite(e,t,r,i){const s=this._current.writer.metricWriter;s.incr(this._current.metricBoxLenPointer),s.push(0),s.push(0),s.push(e),s.push(t),s.push(r),s.push(i)}recordEnd(){const e=this._current.indexStart,r=this._current.writer.indexCount;if(e===r)return!1;this.hasRecords=!0;const a=r-e,u=this._current.vertStart,h=this._current.writer.vertexCount-u;if(this._current.writer.recordEnd(this._current.id,this._current.materialKey,this._current.insertAfter,e,a,u,h,this._current.sortKey),!this._pixelBufferEnabled||this._hasAggregate||0===this._current.overlaps||this._current.geometryType===i.LABEL)return!0;const c=this._current.writer;for(let i=0;i<8;i++){const e=1<<i;if(!!(this._current.overlaps&e)){this._data.neighbors[i]||(this._data.neighbors[i]={vertexData:new Map,displayIds:new Set});const r=this._data.neighbors[i],a=this._current.geometryType;if(!r.vertexData.has(a)){const e=s(a,this._current.isDotDensity).geometry,i=new n(a,e,t);r.vertexData.set(a,i)}const u=r.vertexData.get(this._current.geometryType),h=8,o=512*-x(e)*h,l=512*-f(e)*h;u.copyLastFrom(c,o,l),r.displayIds.add(this._current.id)}}return!0}_addOverlap(e,t,i,s){const n=255^((e<0+i?y:e>=r-i?m:y|m)|(t<0+s?v:t>=r-s?w:v|w));this._current.overlaps|=n}_getVertexWriter(e,t){if(!this._data.self.has(e)){const t=this._data.self,r=s(e,this._hasDotDensity).geometry;t.set(e,new n(e,r,this.hint.records))}return this._data.self.get(e)}}export{E as MeshData};
