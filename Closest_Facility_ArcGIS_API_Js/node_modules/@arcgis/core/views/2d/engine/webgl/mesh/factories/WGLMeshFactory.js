/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import"../../../../../../core/has.js";import{isSome as e}from"../../../../../../core/maybe.js";import{isAborted as t}from"../../../../../../core/promiseUtils.js";import{loadLibtess as r}from"../../../../../../geometry/libtess.js";import s from"../templates/WGLLabelTemplate.js";import i from"../templates/WGLMarkerTemplate.js";import{isDynamicId as o}from"../templates/WGLTemplateStore.js";import{isAggregateId as a}from"../../../../layers/features/support/AttributeStore.js";class l{constructor(e,t,s){this._loadPromise=r(),this._geometryType=e,this._idField=t,this._templateStore=s}update(t,r){e(t.mesh.labels)&&(this._labelTemplates=this._createLabelTemplates(t.mesh.labels,r)),this._schema=t}_createLabelTemplates(e,t){const r=new Map;if("simple"===e.type){for(const i of e.classes){const e=s.fromLabelClass(i,t);r.set(i.index,e)}return r}for(const i in e.classes){const o=e.classes[i];for(const e of o){const i=s.fromLabelClass(e,t);r.set(e.index,i)}}return r}get templates(){return this._templateStore}async analyze(r,s,i,l,n,m){if(t(m))return;let p;"dictionary"===s.type&&(p=await s.analyze(this._idField,r.copy(),l,n,m));let f=0;for(;r.next();){let t;if(t=p?p[f++]:e(i)&&a(r.getDisplayId())&&1!==r.readAttribute("cluster_count")?i.match(this._idField,r,this._geometryType,l,n):s.match(this._idField,r,this._geometryType,l,n),r.setGroupId(t),o(t)){const e=this._templateStore.getDynamicTemplateGroup(t);for(const t of e)t&&t.analyze&&t.analyze(this._templateStore,r,l,n)}}return await this._loadPromise,this._templateStore.finalize(m)}async analyzeGraphics(e,r,s,i,a){if(t(a))return;const l=e.getCursor();for(r&&await r.analyze(this._idField,l.copy(),s,i,a);l.next();){let e=l.getGroupId();if(null!=e&&-1!==e||(e=r.match(this._idField,l,l.geometryType,s,i),l.setGroupId(e)),o(e)){const t=this._templateStore.getDynamicTemplateGroup(e);for(const e of t)e&&e.analyze&&e.analyze(this._templateStore,l,s,i)}l.setGroupId(e)}return await this._loadPromise,this._templateStore.finalize(a)}writeGraphic(e,t,r){const s=t.getGroupId(),i=t.getDisplayId(),a=this._templateStore.getTemplateGroup(s);if(e.featureStart(t.insertAfter,0),null!=i){if(o(s))for(const e of a)e.bindFeature(t,null,null);if(a){for(const s of a)s&&s.write(e,t,r);e.featureEnd()}}}writeCursor(t,r,s,i,a,l){const n=r.getGroupId(),m=r.getDisplayId(),p=this._templateStore.getTemplateGroup(n),f=this._schema.mesh.sortKey;let c=0;if(e(f)&&(c=null!=f.fieldIndex?r.getComputedNumericAtIndex(f.fieldIndex):null!=f.field?r.readAttribute(f.field):r.readAttribute(this._idField),c*="asc"===f.order?1:-1),t.featureStart(0,null==c||isNaN(c)?0:c),null!=m&&p){if(o(n))for(const e of p)e.bindFeature(r,s,i);for(const e of p)e.write(t,r,a);if(e(l)&&t.hasRecords){const e=l&&this._findLabelRef(p);this._writeLabels(t,r,l,e,a)}t.featureEnd()}}_findLabelRef(e){for(const t of e)if(t instanceof i)return t;return null}_writeLabels(t,r,s,i,o){for(const a of s)if(e(a)&&a){const{glyphs:e,rtl:s,index:l}=a,n=this._labelTemplates.get(l);n.setZoomLevel(o),n.bindReferenceTemplate(i),n.bindTextInfo(e,s),n.write(t,r,null)}}}export{l as WGLMeshFactory};
