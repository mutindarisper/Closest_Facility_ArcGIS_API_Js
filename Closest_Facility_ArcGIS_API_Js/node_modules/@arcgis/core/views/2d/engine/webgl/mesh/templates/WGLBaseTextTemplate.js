/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{andThen as e,isNone as t,isSome as i,unwrap as r}from"../../../../../../core/maybe.js";import{pt2px as s}from"../../../../../../core/screenUtils.js";import{deltaDecodeGeometry as o,convertFromGeometry as n}from"../../../../../../layers/graphics/featureConversionUtils.js";import{CIMMarkerPlacementHelper as h}from"../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper.js";import{MAGIC_LABEL_LINE_HEIGHT as x}from"../../definitions.js";import{WGLGeometryType as a}from"../../enums.js";import{i8888to32 as l,i1616to32 as m}from"../../number.js";import{MaterialKeyBase as d}from"../../materialKey/MaterialKey.js";import{shapeGlyphs as c}from"./shapingUtils.js";const f=8,_=_=>class extends _{constructor(...e){super(...e),this._isCIM=!1,this._vertexBoundsScale=1,this.geometryType=a.TEXT,this._aux=l(0,0,this._referenceSize,this._bitset)}bindTextInfo(t,i){t&&t.length?this._shapingInfo=e(t,(e=>c(e,i,{scale:this._scale,angle:this._angle,xOffset:this._xOffset,yOffset:this._yOffset,hAlign:this._xAlignD,vAlign:this._yAlignD,maxLineWidth:Math.max(32,Math.min(this._lineWidth,512)),lineHeight:x*Math.max(.25,Math.min(this._lineHeight,4)),decoration:this._decoration,isCIM:this._isCIM}))):this._shapingInfo=null}_write(e,t,i){const r=t.getDisplayId();this._writeGeometry(e,t,r,i)}_writeGeometry(e,r,s,h){const x=this._shapingInfo;if(t(x))return;if(i(this._textPlacement)){const t=null!=h?h:r.readLegacyGeometryForDisplay();return this._writePlacedText(e,s,t,x)}const a=h?o(n(h),2):"esriGeometryPolygon"===r.geometryType?r.readCentroid():r.readGeometryForDisplay();if(!t(a)){if(a.isPoint){const[t,i]=a.coords;return this._writeGlyphs(e,s,{x:t,y:i},x)}a.forEachVertex(((t,i)=>this._writeGlyphs(e,s,{x:t,y:i},x)))}}_writePlacedText(e,t,i,o){const n=r(this._textPlacement),x=h.getPlacement(i,n,s(1));if(!x)return;let a=x.next();for(;null!=a;){const i=a.getAngle();o.setRotation(i);const r=a.tx,s=a.ty;r<0||r>=512||s<0||s>=512?a=x.next():(this._writeGlyphs(e,t,{x:r,y:s},o),o.setRotation(-i),a=x.next())}}_writeGlyphs(e,t,i,r){const s=d.load(this._materialKey),o=m(Math.round(f*i.x),Math.round(f*i.y)),n=this._vertexBoundsScale,h=r.bounds,x=2*Math.max(h.width,h.height);for(const a of r.glyphs)s.textureBinding=a.textureBinding,e.recordStart(t,s.data,this.geometryType,!1,!0),e.vertexBounds(i.x+h.x+this._xOffset,i.y+h.y-this._yOffset,x*n,x*n),this._writeVertices(e,t,o,a),e.recordEnd()}_writeGlyph(e,t,i,r,s){const o=d.load(this._materialKey),n=m(Math.round(f*i),Math.round(f*r));o.textureBinding=s.textureBinding,e.recordStart(t,o.data,this.geometryType,!1,!0);const h=s.bounds,x=this._vertexBoundsScale;e.vertexBounds(i+h.x*x,r+h.y*x,h.width*x,h.height*x),this._writeVertices(e,t,n,s),e.recordEnd()}_writeVertices(e,t,i,r){const s=e.vertexCount();this._writeVertexCommon(e,t,i,r),e.vertexWrite(r.offsets.upperLeft),e.vertexWrite(r.texcoords.upperLeft),e.vertexEnd(),this._writeVertexCommon(e,t,i,r),e.vertexWrite(r.offsets.upperRight),e.vertexWrite(r.texcoords.upperRight),e.vertexEnd(),this._writeVertexCommon(e,t,i,r),e.vertexWrite(r.offsets.lowerLeft),e.vertexWrite(r.texcoords.lowerLeft),e.vertexEnd(),this._writeVertexCommon(e,t,i,r),e.vertexWrite(r.offsets.lowerRight),e.vertexWrite(r.texcoords.lowerRight),e.vertexEnd(),e.indexWrite(s+0),e.indexWrite(s+1),e.indexWrite(s+2),e.indexWrite(s+1),e.indexWrite(s+3),e.indexWrite(s+2)}_writeVertexCommon(e,t,i,r){const s=this._color,o=this._haloColor,n=l(0,0,this._referenceSize,this._bitset),h=l(0,0,this._size,this._haloSize);e.vertexWrite(i),e.vertexWrite(t),e.vertexWrite(s),e.vertexWrite(o),e.vertexWrite(h),e.vertexWrite(n),e.vertexWrite(this._minMaxZoom)}};export{_ as default};
