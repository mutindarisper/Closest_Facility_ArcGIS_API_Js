/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import"../../../../../geometry.js";import e from"../../../../../core/Evented.js";import t from"../../../../../core/has.js";import{isNone as s,isSome as r,andThen as a}from"../../../../../core/maybe.js";import{diff as i,hasDiff as o}from"../../../../../core/accessorSupport/diffUtils.js";import{GeohashTree as h}from"../../../../../geohash/GeohashTree.js";import{setGeohashBuf as l,setGeohashXY as n}from"../../../../../geohash/geohashUtils.js";import{earth as u}from"../../../../../geometry/support/Ellipsoid.js";import{getInfo as c}from"../../../../../geometry/support/spatialReferenceUtils.js";import{quantizeX as g,quantizeY as d}from"../../../../../layers/graphics/featureConversionUtils.js";import p,{OptimizedFeatureWithGeometry as _}from"../../../../../layers/graphics/OptimizedFeature.js";import f from"../../../../../layers/graphics/OptimizedGeometry.js";import{checkProjectionSupport as m,project as y}from"../../../../../layers/graphics/data/projectionSupport.js";import{TILE_SIZE as I}from"../../../engine/webgl/definitions.js";import{Store2D as b}from"../Store2D.js";import{FeatureSetReaderJSON as v}from"./FeatureSetReaderJSON.js";import R from"../../../../../geometry/SpatialReference.js";const C=12,M=1;class x extends _{constructor(e,t,s,r,a){super(new f([],[t,s]),r,null,e),this.geohashBoundsInfo=a}get count(){return this.attributes.cluster_count}static create(e,t,s,r,a,i,o,h){const l=new x(t,s,r,i,o);return l.displayId=e.createDisplayId(!0),l.referenceId=h,l.tileLevel=a,l}update(e,t,s,r,a,i){return this.geometry.coords[0]=e,this.geometry.coords[1]=t,this.tileLevel=s,this.attributes=r,this.geohashBoundsInfo=a,this.referenceId=null,this.referenceId=i,this}toJSON(){return{objectId:this.objectId,referenceId:1===this.attributes.cluster_count?this.referenceId:null,attributes:{...this.attributes,clusterId:this.objectId},geometry:{x:this.geometry.coords[0],y:this.geometry.coords[1]}}}}function L(e){return 57.29577951308232*e}class j extends b{constructor(t,s,r){super(t,r),this.events=new e,this._geohashLevel=0,this._tileLevel=0,this._aggregateValueRanges={},this._aggregateValueRangesChanged=!1,this._geohashBuf=[],this._clusters=new Map,this._tiles=new Map,this.geometryInfo=t.geometryInfo,this._spatialReference=s,this._projectionSupportCheck=m(s,R.WGS84),this._bitsets.geohash=r.getBitset(r.createBitset()),this._bitsets.inserted=r.getBitset(r.createBitset())}async updateSchema(e,r){const a=this._schema;try{await super.updateSchema(e,r),await this._projectionSupportCheck}catch(n){}const l=i(a,r);r&&(!s(l)||e.source||e.storage.filters)?((o(l,"params.fields")||!this._tree||e.source)&&(this._tree=new h(this._statisticFields),this._rebuildTree(),t("esri-2d-update-debug")&&console.debug("Aggregate mesh needs update due to tree changing")),t("esri-2d-update-debug")&&console.debug("Applying Update - ClusterStore:",l),e.targets[r.name]=!0,e.mesh=!1,this._aggregateValueRanges={}):a&&(e.mesh=!0)}clear(){this._rebuildTree()}sweepFeatures(e,t){this._bitsets.inserted.forEachSet((s=>{if(!e.has(s)){const e=t.lookupByDisplayIdUnsafe(s);this._remove(e)}}))}sweepClusters(e,t,s){this._clusters.forEach(((r,a)=>{r&&r.tileLevel!==s&&(e.releaseDisplayId(r.displayId),t.unsetAttributeData(r.displayId),this._clusters.delete(a))}))}onTileData(e,t,r,a,i=!0){if(!this._schema||s(t.addOrUpdate))return t;const o=this._getTransforms(e,this._spatialReference);{const e=t.addOrUpdate.getCursor();for(;e.next();)this._update(e,a)}if(t.status.mesh||!i)return t;const h=new Array,l=this._schema.params.clusterRadius;this._getClustersForTile(h,e,l,r,o),t.addOrUpdate=v.fromOptimizedFeatures(h,"esriGeometryPoint"),t.addOrUpdate.attachStorage(r),t.end=!0;{const s=t.addOrUpdate.getCursor();for(;s.next();){const t=s.getDisplayId();this._bitsets.computed.unset(t),this.setComputedAttributes(r,s,t,e.scale)}}return this._aggregateValueRangesChanged&&t.end&&(this.events.emit("valueRangesChanged",{valueRanges:this._aggregateValueRanges}),this._aggregateValueRangesChanged=!1),t}onTileUpdate({added:e,removed:t}){if(e.length){const t=e[0].level;this._tileLevel=t,this._setGeohashLevel(t)}if(!this._schema)return;const s=this._schema.params.clusterRadius;t.forEach((e=>{this._tiles.delete(e.key.id),this._markTileClustersForDeletion(e,s)}))}getAggregate(e){let t=null;return this._clusters.forEach((s=>{s&&s.displayId===e&&(t=s.toJSON())})),t}getAggregates(){const e=[];return this._clusters.forEach((t=>{t&&t.tileLevel===this._tileLevel&&e.push(t.toJSON())})),e}getDisplayId(e){const t=this._clusters.get(e);return t?t.displayId:null}getFeatureDisplayIdsForAggregate(e){const t=this._clusters.get(e);if(!t)return[];const s=t.geohashBoundsInfo;return this._tree.getRegionDisplayIds(s.xLL,s.yLL,s.xTR,s.yTR,s.level)}getDisplayIdForReferenceId(e){let t;return this._clusters.forEach((s=>{s&&s.referenceId===e&&(t=s.displayId)})),t}getAggregateValueRanges(){return this._aggregateValueRanges}forEach(e){this._clusters.forEach(((t,s)=>{t&&e(t,s)}))}size(){let e=0;return this.forEach((t=>e++)),e}_rebuildTree(){this._bitsets.computed.clear(),this._bitsets.inserted.clear(),this._tree&&this._tree.clear()}_remove(e){const t=e.getDisplayId(),s=e.getXHydrated(),r=e.getYHydrated(),a=this._geohashBuf[2*t],i=this._geohashBuf[2*t+1];this._bitsets.inserted.has(t)&&(this._bitsets.inserted.unset(t),this._tree.removeCursor(e,s,r,a,i,this._geohashLevel))}_update(e,t){const s=e.getDisplayId(),r=this._bitsets.inserted,a=t.isVisible(s);if(a===r.has(s))return;if(!a)return void this._remove(e);const i=e.getXHydrated(),o=e.getYHydrated();if(!this._setGeohash(s,i,o))return;const h=this._geohashBuf[2*s],l=this._geohashBuf[2*s+1];this._tree.insertCursor(e,s,i,o,h,l,this._geohashLevel),r.set(s)}_setGeohash(e,t,s){if(this._bitsets.geohash.has(e))return!0;const r=this._geohashBuf;if(this._spatialReference.isWebMercator){const a=L(t/u.radius),i=a-360*Math.floor((a+180)/360),o=L(Math.PI/2-2*Math.atan(Math.exp(-s/u.radius)));l(r,e,o,i,C)}else{const a=y({x:t,y:s},this._spatialReference,R.WGS84);if(!a)return!1;l(r,e,a.y,a.x,C)}return this._bitsets.geohash.set(e),!0}_getClustersForTile(e,t,i,o,h,l=!0){const n=this._schema.params.clusterPixelBuffer,u=2*i,c=this._getGeohashLevel(t.key.level),_=Math.ceil(2**t.key.level*I/u),f=Math.ceil(n/u)+0,m=Math.ceil(I/u),{row:y,col:b}=t.key,v=b*I,R=y*I,C=Math.floor(v/u)-f,M=Math.floor(R/u)-f,x=C+m+2*f,L=M+m+2*f,j=t.tileInfoView.getLODInfoAt(t.key.level);for(let I=C;I<=x;I++)for(let i=M;i<=L;i++){let n=I;j.wrap&&(n=I<0?I+_:I%_);const u=j.wrap&&I<0,f=j.wrap&&I%_!==I,m=this._lookupCluster(o,j,t.key.level,n,i,c);if(r(m)){const t=a(h,(e=>u?e.left:f?e.right:e.tile));if(l&&s(t))continue;if(!m.count)continue;if(r(t)&&l){const s=m.geometry.clone();let a=m.attributes;s.coords[0]=g(t,s.coords[0]),s.coords[1]=d(t,s.coords[1]),1===m.count&&r(m.referenceId)&&(a={...m.attributes,referenceId:m.referenceId});const i=new p(s,a);i.displayId=m.displayId,e.push(i)}}}}_getGeohashLevel(e){return Math.min(Math.ceil(e/2+2),C)}_setGeohashLevel(e){const t=this._getGeohashLevel(e),s=(Math.floor(t/M)+1)*M-1;if(this._geohashLevel!==s)return this._geohashLevel=s,this._rebuildTree(),void this._bitsets.geohash.clear()}_getTransforms(e,t){const s={originPosition:"upperLeft",scale:[e.resolution,e.resolution],translate:[e.bounds[0],e.bounds[3]]},r=c(t);if(!r)return{tile:s,left:null,right:null};const[a,i]=r.valid;return{tile:s,left:{...s,translate:[i,e.bounds[3]]},right:{...s,translate:[a-i+e.bounds[0],e.bounds[3]]}}}_getClusterId(e,t,s){return(15&e)<<28|(16383&t)<<14|16383&s}_markForDeletion(e,t,s){const r=this._getClusterId(e,t,s);this._clusters.delete(r)}_getClusterBounds(e,t,s){const r=this._schema.params.clusterRadius,a=2*r;let i=s%2?t*a:t*a-r;const o=s*a;let h=i+a;const l=o-a,n=2**e.level*I;e.wrap&&i<0&&(i=0),e.wrap&&h>n&&(h=n);const u=i/I,c=o/I,g=h/I,d=l/I;return[e.getXForColumn(u),e.getYForRow(c),e.getXForColumn(g),e.getYForRow(d)]}_lookupCluster(e,t,s,a,i,o){const h=this._getClusterId(s,a,i),l=this._clusters.get(h),[c,g,d,p]=this._getClusterBounds(t,a,i),_={x:c,y:g},f={x:d,y:p};let m=0,I=0,b=0,v=0;if(this._spatialReference.isWebMercator){{const e=L(_.x/u.radius);m=e-360*Math.floor((e+180)/360),I=L(Math.PI/2-2*Math.atan(Math.exp(-_.y/u.radius)))}{const e=L(f.x/u.radius);b=e-360*Math.floor((e+180)/360),v=L(Math.PI/2-2*Math.atan(Math.exp(-f.y/u.radius)))}}else{const e=y(_,this._spatialReference,R.WGS84),t=y(f,this._spatialReference,R.WGS84);if(!e||!t)return null;m=e.x,I=e.y,b=t.x,v=t.y}const C={geohashX:0,geohashY:0},M={geohashX:0,geohashY:0};n(C,I,m,o),n(M,v,b,o);const j=C.geohashX,w=C.geohashY,V=M.geohashX,S=M.geohashY,F={xLL:j,yLL:w,xTR:V,yTR:S,level:o},T=this._tree.getRegionStatistics(j,w,V,S,o),{count:D,xTotal:k,yTotal:B,referenceId:G}=T,O=D?k/D:0,A=D?B/D:0;if(0===D)return this._clusters.set(h,null),null;const U={cluster_count:D,...T.attributes},E=r(l)?l.update(O,A,s,U,F,G):x.create(e,h,O,A,s,U,F,G);return 0===D&&(E.geometry.coords[0]=(c+d)/2,E.geometry.coords[1]=(g+p)/2),this._clusters.set(h,E),this._updateAggregateValueRangeForCluster(E,E.tileLevel),E}_updateAggregateValueRangeForCluster(e,t){const s=this._aggregateValueRanges[t]||{minValue:1/0,maxValue:0},r=s.minValue,a=s.maxValue;s.minValue=Math.min(r,e.count),s.maxValue=Math.max(a,e.count),this._aggregateValueRanges[t]=s,r===s.minValue&&a===s.maxValue||(this._aggregateValueRangesChanged=!0)}_markTileClustersForDeletion(e,t){const s=2*t,r=Math.ceil(I/s),{row:a,col:i}=e.key,o=i*I,h=a*I,l=Math.floor(o/s),n=Math.floor(h/s);for(let u=l;u<l+r;u++)for(let t=n;t<n+r;t++)this._markForDeletion(e.key.level,u,t)}}export{x as ClusterInfo,j as ClusterStore};
