/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{pt2px as t}from"../../../../../core/screenUtils.js";import{CIMSymbolHelper as e}from"../../../../../symbols/cim/CIMSymbolHelper.js";import r from"../../../../../symbols/cim/Rect.js";import{AVERAGE_GLYPH_MOSAIC_ITEM as i}from"../../../engine/webgl/definitions.js";import{getTextSymbolSize as n}from"../../graphics/graphicsUtils.js";const s={"simple-marker":1,"picture-marker":1,text:0,"simple-line":0,"simple-fill":0,"picture-fill":0,cim:1,"web-style":1},o=.707;function a(t){if(!("visualVariables"in t))return 0;if(!t.hasVisualVariables("size"))return 0;const e=t.getVisualVariablesForType("size");if(!e[0])return 0;const r=e[0];if("outline"===r.target)return 0;if("stops"===r.transformationType)return r.stops.map((t=>t.size)).reduce(x,0);if("clamped-linear"===r.transformationType){let t=-1/0,e=-1/0;return t="number"==typeof r.maxSize?r.maxSize:r.maxSize.stops.map((t=>t.size)).reduce(x,0),e="number"==typeof r.minSize?r.minSize:r.minSize.stops.map((t=>t.size)).reduce(x,0),Math.max(t,e)}return"real-world-size"===r.transformationType?30:void 0}function m(t){return t.type in s}async function u(e,r,i){if(!e||i&&"cluster"===i.type)return 0;if("heatmap"===e.type)return Math.round(3*e.blurRadius);if("dot-density"===e.type)return 0;if("dictionary"===e.type)return"esriGeometryPoint"===r||"esriGeometryMultipoint"===r?100:200;const n=e.getSymbols(),s=a(e),o=[];for(const t of n)o.push(d(t,s));const m=await Promise.all(o);return t(m.reduce(x,0))}const c=[0,0,0,0];function l(t,e){return null==t?e:t}function p(t,e){return null==t.outline?e:l(t.outline.width,e)}const f={sdf:!0,code:99,metrics:i.metrics,rect:new r(0,0,24,24),page:0,textureBinding:2};function h(t){const e=t.text&&t.text.length;if(!e)return{glyphMosaicItems:[f]};const r=[];for(let i=0;i<e;i++)r.push({...f,code:t.text.charCodeAt(i)});return{glyphMosaicItems:r}}async function y(t,r){if("simple-marker"===t.type){const e=Math.max(l(t.size,12),r);return M(t)+e*o}if("picture-marker"===t.type){const e=Math.max(l(t.height,12),r),i=l(t.width,12)*(e/l(t.height,12))/2,n=e/2;return M(t)+Math.sqrt(i*i+n*n)}if("text"===t.type){const e=h(t);n(c,t.toJSON(),e);const r=Math.abs(c[0]),i=Math.abs(c[1]),s=c[2],o=c[3];return Math.max(r,i)+Math.max(s,o)}if("simple-line"===t.type){const e=t,i=Math.max(l(e.width,.75),r)/2;return e.marker?Math.max(6*e.width,2*r):i}if("simple-fill"===t.type||"picture-fill"===t.type)return Math.max(p(t,0),r)/2;if("cim"===t.type){const r=e.getEnvelope(t.data);return r?Math.sqrt(r.width*r.width+r.height*r.height):0}return"web-style"===t.type?y(await t.fetchCIMSymbol(),r):0}async function d(t,e){return m(t)?Math.min(await y(t,e),75):0}function M(t){const e=l(t.xoffset,0),r=l(t.yoffset,0);return Math.sqrt(e*e+r*r)}function x(t,e){return Math.max(t,e)}export{u as computePxBuffer,a as getPtMaxVVSize};
