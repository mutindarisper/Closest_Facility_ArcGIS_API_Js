/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{C as i}from"../../../chunks/ChapmanAtmosphere.glsl.js";import{ReloadableShaderModule as r}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{parameter as t,ShaderTechniqueConfiguration as n}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as s}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as a}from"../webgl-engine/lib/Program.js";import{makePipelineState as l,separateBlendingParams as h,defaultColorWriteParams as m}from"../../webgl/renderState.js";class p extends o{initializeProgram(e){const i=p.shader.get(),r=this.configuration,o=i.build({haze:r.haze,simplified:r.simplified});return new a(e.rctx,o,s)}initializePipeline(){return this.configuration.haze?l({blending:h(1,0,769,1),colorWrite:m}):l({blending:h(770,1,771,771),depthTest:{func:515},colorWrite:m})}}p.shader=new r(i,(()=>import("./ChapmanAtmosphere.glsl.js")));class d extends n{constructor(){super(...arguments),this.haze=!1,this.simplified=!1}}e([t()],d.prototype,"haze",void 0),e([t()],d.prototype,"simplified",void 0);export{p as ChapmanAtmosphereTechnique,d as ChapmanAtmosphereTechniqueConfiguration};
