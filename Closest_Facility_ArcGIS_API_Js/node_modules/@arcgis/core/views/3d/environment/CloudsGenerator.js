/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{releaseMaybe as e,disposeMaybe as t,destroyMaybe as i,isNone as s}from"../../../core/maybe.js";import{f as r}from"../../../chunks/mat3.js";import{c as h}from"../../../chunks/mat3f64.js";import{n as o}from"../../../chunks/mat4.js";import{c as a}from"../../../chunks/mat4f64.js";import{z as n,f as u}from"../../../chunks/vec3f32.js";import{getReferenceEllipsoid as l}from"../../../geometry/projectionEllipsoid.js";import{CloudsTechnique as d}from"./CloudsTechnique.js";import{NoiseTextureAtlas as c}from"./NoiseTextureAtlas.js";import{createQuadVAO as _}from"../webgl-engine/lib/glUtil3D.js";import f from"../../webgl/FramebufferObject.js";class m{constructor(e,t){this._cubeMapSize=2048,this._viewMat3=h(),this._eye=n(),this._faceRenderFlags=[],this.viewDirections=[u(1,0,0),u(-1,0,0),u(0,1,0),u(0,-1,0),u(0,0,1)],this.upDirections=[u(0,1,0),u(0,1,0),u(0,0,-1),u(0,0,1),u(0,1,0)],this._cloudRadius=0,this._viewMatrix=a(),this.coverage=.4,this.density=.5,this.cloudSize=.5,this.detailSize=.5,this.smoothness=.7,this.absorption=0,this.cloudHeight=1,this._noiseTextureAtlas=new c(e,t),this._noiseTextureAtlas.render(128,e);const i={target:34067,pixelFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,hasMipmap:!1,width:this._cubeMapSize,height:this._cubeMapSize};this._frameBufferCube=new f(e,{colorTarget:2,width:this._cubeMapSize,height:this._cubeMapSize},i),this._vao=_(e),this._technique=new d({rctx:e,viewingMode:t.state.viewingMode},null);const s=l(t.spatialReference);this._cloudRadius=.5*s.radius,this.resetRenderFlags()}set coverage(e){this._coverage=e,this.resetRenderFlags()}get coverage(){return this._coverage}set density(e){this._density=this.remap(e,0,1,0,.3),this.resetRenderFlags()}get density(){return this._density}set cloudSize(e){this._cloudSize=this.remap(Math.max(.01,1-e),0,1,0,.02),this.resetRenderFlags()}get cloudSize(){return this._cloudSize}set detailSize(e){this._detailSize=this.remap(Math.max(.01,1-e),0,1,0,.2),this.resetRenderFlags()}get detailSize(){return this._detailSize}set smoothness(e){this._smoothness=this.remap(1-e,0,1,0,.5),this.resetRenderFlags()}get smoothness(){return this._smoothness}set absorption(e){this._sigmaE=1+e,this._power=this.remap(e,0,1,35,70),this.resetRenderFlags()}get absorption(){return this._power}set cloudHeight(e){this._cloudHeight=this.remap(e,0,1,0,1500),this.resetRenderFlags()}get cloudHeight(){return this._cloudHeight}destroy(){this._technique=e(this._technique),this._frameBufferCube=t(this._frameBufferCube),this._vao=t(this._vao),this._noiseTextureAtlas=i(this._noiseTextureAtlas)}resetRenderFlags(){for(let e=0;e<5;e++)this._faceRenderFlags[e]=!0}_allRendered(){for(let e=0;e<5;e++)if(!0===this._faceRenderFlags[e])return!1;return!0}remap(e,t,i,s,r){return s+(e-t)*(r-s)/(i-t)}render(e){if(s(this._vao)||this._allRendered())return!1;this.resetRenderFlags(),e.setViewport(0,0,this._cubeMapSize,this._cubeMapSize),e.bindFramebuffer(this._frameBufferCube,!1,34069);const t=this._technique.program;e.useProgram(t),t.bindTexture(this._noiseTextureAtlas.textureAtlas,"cloudShapeTexture"),t.setUniform1f("cloudRadius",this._cloudRadius),t.setUniform1f("halfCubeMapSize",.5*this._cubeMapSize),t.setUniform1f("power",this._power),t.setUniform1f("sigmaE",this._sigmaE),t.setUniform1f("density",this._density),t.setUniform1f("cloudSize",this._cloudSize),t.setUniform1f("detailSize",this._detailSize),t.setUniform1f("smoothness",this._smoothness),t.setUniform1f("cloudHeight",this._cloudHeight),t.setUniform1f("coverage",this._coverage),e.bindVAO(this._vao),t.assertCompatibleVertexAttributeLocations(this._vao),this._technique.bindPipelineState(e);for(let i=0;i<5;i++)if(this._faceRenderFlags[i]){const s=this.viewDirections[i],h=this.upDirections[i];o(this._viewMatrix,this._eye,s,h),r(this._viewMat3,this._viewMatrix),t.setUniformMatrix3fv("viewMatrix",this._viewMat3);const a=34069+i;this._frameBufferCube.framebufferTexture2D(this._frameBufferCube.colorAttachment.glName,e.gl,36064,a),e.gl.drawArrays(e.gl.TRIANGLE_STRIP,0,4),e.gl.flush(),this._faceRenderFlags[i]=!1}return!0}get test(){return{power:this._power,density:this._density,cloudHeight:this._cloudHeight,cloudSize:this._cloudSize,detailSize:this._detailSize,smoothness:this._smoothness}}}export{m as CloudsGenerator};
