/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import e from"../../../core/Handles.js";import{isSome as t,unwrapOr as a,isNone as r}from"../../../core/maybe.js";import{on as s}from"../../../core/watchUtils.js";import{b as i}from"../../../chunks/mat4.js";import{c as n}from"../../../chunks/mat4f64.js";import{s as o}from"../../../chunks/vec2.js";import{a as h}from"../../../chunks/vec2f64.js";import{a as d,b as c,s as m,l,g as u}from"../../../chunks/vec3.js";import{a as p,c as _,f as v}from"../../../chunks/vec3f64.js";import{s as f}from"../../../chunks/vec4.js";import{c as D,f as g}from"../../../chunks/vec4f64.js";import{earth as b}from"../../../geometry/support/Ellipsoid.js";import{computeInnerAltitudeFade as w,innerAtmosphereDepth as j}from"./atmosphereUtils.js";import{RealisticAtmosphereTechniqueConfiguration as P,RealisticAtmosphereTechnique as x}from"./RealisticAtmosphereTechnique.js";import{glLayout as T}from"../support/buffer/glUtil.js";import{newLayout as B}from"../support/buffer/InterleavedLayout.js";import{Default3D as S}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import R from"../../webgl/BufferObject.js";import y from"../../webgl/VertexArrayObject.js";class V{constructor(e){this._view=e,this.canRender=!0,this._skyslot=15,this._hazeSlot=16,this._renderData={texDepth:h(),cameraPosition:_(),projectionInverse:n(),viewInverse:n(),heightParameters:D(),atmosphereParameters1:D(),atmosphereParameters2:D(),atmosphereParameters3:_(),invWavelength:U,invWavelengthScaled:C,radii:h(),scale:0,scaleDepth:F,lowerAlphaBlendBound:0,scaleOverScaleDepth:0,oneOverScaleDepth:0,scaleDepthBlue:k,oneOverScaleDepthBlue:I,scaleOverScaleDepthBlue:0,g:O,g2:O*O,miePhaseCoefficients:A,nearFar:h(),cameraHeight:0,cameraHeightSq:0,C:0,CSur:0,innerFadeDistance:0,altitudeFade:0},this._lowerElevationBoundRadius=0,this._lowerBoundEarthRadius=b.radius,this._updateRadius(b.radius)}destroy(){this._handles&&(this._handles.destroy(),this._handles=null),this._vao&&(this._vao.dispose(),this._vao=null)}when(){return Promise.resolve()}initializeRenderContext(a){const r=a.renderContext.rctx;this._handles=new e,t(this._view.basemapTerrain.rootTiles)&&this._updateElevation({spatialReference:this._view.basemapTerrain.spatialReference,tile:this._view.basemapTerrain.rootTiles[0],extent:this._view.basemapTerrain.rootTiles[0].extent,context:"ground"}),this._handles.add(s(this._view,"basemapTerrain","elevation-change",(e=>this._updateElevation(e)),(()=>this._updateElevation()))),this._handles.add(s(this._view,"basemapTerrain","elevation-bounds-change",(()=>this._updateVisibleElevationBounds()),(()=>this._updateVisibleElevationBounds())));const i=new P;i.haze=!1,this._atmosphereTechnique=a.shaderTechniqueRep.acquire(x,i),i.haze=!0,this._atmosphereHazeTechnique=a.shaderTechniqueRep.acquire(x,i),this._vao=this._createVertexArrayObject(r)}uninitializeRenderContext(){this.destroy()}render(e){return(e.slot===this._hazeSlot||e.slot===this._skyslot)&&0===e.pass&&(this._update(e.camera),e.slot===this._skyslot&&this._renderSky(e),e.slot===this._hazeSlot&&this._renderHaze(e),!0)}_renderSky(e){const t=e.rctx,a=this._atmosphereTechnique.program;t.useProgram(a),this._atmosphereTechnique.bindPipelineState(t),a.setUniform3fv("atmosphereParameters3",this._renderData.atmosphereParameters3),this._renderCommon(a,e)}_renderHaze(e){const t=e.rctx,a=e.offscreenRenderingHelper,r=this._atmosphereHazeTechnique.program;t.useProgram(r),this._atmosphereHazeTechnique.bindPipelineState(t),a.renderDepthDetached((()=>{const t=a.depthTexture;r.bindTexture(t,"depthTex"),this._renderCommon(r,e)}))}_renderCommon(e,t){const a=t.rctx;e.setUniform3fv("invWavelength",this._renderData.invWavelength),e.setUniform3fv("invWavelengthScaled",this._renderData.invWavelengthScaled),t.scenelightingData.setLightDirectionUniform(e),e.setUniform4fv("heightParameters",this._renderData.heightParameters),e.setUniform3fv("cameraPosition",this._renderData.cameraPosition),e.setUniformMatrix4fv("projectionInverse",this._renderData.projectionInverse),e.setUniformMatrix4fv("viewInverse",this._renderData.viewInverse),e.setUniform2fv("nearFar",this._renderData.nearFar),e.setUniform2fv("radii",this._renderData.radii),e.setUniform4fv("atmosphereParameters1",this._renderData.atmosphereParameters1),e.setUniform4fv("atmosphereParameters2",this._renderData.atmosphereParameters2),e.setUniform1f("innerFadeDistance",this._renderData.innerFadeDistance),e.setUniform1f("altitudeFade",this._renderData.altitudeFade),a.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),a.drawArrays(5,0,4)}_createVertexArrayObject(e){const t=M.createBuffer(4);return t.position.setVec(0,[-1,-1]),t.position.setVec(1,[1,-1]),t.position.setVec(2,[-1,1]),t.position.setVec(3,[1,1]),t.uv0.setVec(0,[0,0]),t.uv0.setVec(1,[1,0]),t.uv0.setVec(2,[0,1]),t.uv0.setVec(3,[1,1]),new y(e,S,{geometry:T(M)},{geometry:R.createVertex(e,35044,t.buffer)})}_adjustRadiusForTesselation(e){const t=16,a=4,r=Math.PI/2**a/t;return e*Math.cos(r)}_updateElevation(e){const t=e?e.tile:a(this._view.basemapTerrain.rootTiles,[null])[0];if(r(t)||0!==t.lij[0])return;const s=this._adjustRadiusForTesselation(b.radius+t.elevationBounds[0]);s!==this._lowerElevationBoundRadius&&(this._lowerElevationBoundRadius=s,this._lowerBoundEarthRadius=-1,this._updateVisibleElevationBounds())}_updateVisibleElevationBounds(){const e=this._adjustRadiusForTesselation(b.radius+this._view.basemapTerrain.elevationBounds.min);(this._lowerBoundEarthRadius<0||e<this._lowerBoundEarthRadius)&&this._updateRadius(e)}_updateRadius(e){this._lowerBoundEarthRadius=e;const t=e,a=t/10*10.25,r=1/(a-t),s=r/F,i=r/k,n=.3*(a-t)+t,h=this._renderData;f(h.atmosphereParameters1,r,F,s,z),f(h.atmosphereParameters2,O,k,i,I),m(h.atmosphereParameters3,O*O,A,n),o(h.radii,t,a),h.scale=r,h.lowerAlphaBlendBound=n,h.scaleOverScaleDepth=s,h.scaleOverScaleDepthBlue=i;const d=j;h.innerFadeDistance=2*Math.sqrt((2*t-d)*d)}_update(e){e&&(this._renderData.cameraHeight=l(e.eye),this._renderData.cameraHeightSq=this._renderData.cameraHeight*this._renderData.cameraHeight,this._renderData.C=this._renderData.cameraHeightSq-this._renderData.radii[1]*this._renderData.radii[1],this._renderData.CSur=this._renderData.cameraHeightSq-this._renderData.radii[0]*this._renderData.radii[0],this._renderData.heightParameters=g(this._renderData.cameraHeight,this._renderData.cameraHeightSq,this._renderData.C,this._renderData.CSur),u(this._renderData.cameraPosition,e.eye),i(this._renderData.projectionInverse,e.projectionMatrix),i(this._renderData.viewInverse,e.viewMatrix),o(this._renderData.nearFar,e.near,e.far),this._renderData.altitudeFade=w(this._renderData.cameraHeight-this._lowerBoundEarthRadius))}static isSupported(e){return e.renderContext.rctx.capabilities.depthTexture}}const E=.001,H=4*.005*Math.PI,q=4*E*Math.PI,U=v(1/.65**4,1/.57**4,1/.475**4),C=p(U);d(C,C,H),c(C,C,v(q,q,q));const F=.25,k=.05,z=1/F,I=1/k,O=-.99999,A=(1-O*O)/(2+O*O)*1.5,M=B().vec2f("position").vec2f("uv0");export{V as RealisticAtmosphere};
