/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{m as e,e as r}from"../../../chunks/mat4.js";import{c as i}from"../../../chunks/mat4f64.js";import{S as t}from"../../../chunks/Stars.glsl.js";import{ReloadableShaderModule as a}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{Default3D as n}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as s}from"../webgl-engine/lib/Program.js";import{makePipelineState as m,separateBlendingParams as l,defaultColorWriteParams as c}from"../../webgl/renderState.js";class f extends o{initializeProgram(e){const r=f.shader.get().build();return new s(e.rctx,r,n)}initializePipeline(){return m({blending:l(770,1,771,771),depthTest:{func:515},colorWrite:c})}bindPass(r){const i=this.makeInfiniteProjectionMatrix(r.camera.projectionMatrix,r.camera.near,p);e(i,i,r.camera.viewMatrix),e(i,i,r.modelMatrix),this.program.setUniformMatrix4fv("transform",i),this.program.setUniform4fv("viewport",r.camera.fullViewport),this.program.setUniform1f("pixelRatio",r.camera.pixelRatio)}makeInfiniteProjectionMatrix(e,i,t){const a=24e-8;return r(t,e),t[10]=a-1,t[11]=-1,t[14]=(a-2)*i,t}}f.shader=new a(t,(()=>import("./Stars.glsl.js")));const p=i();export{f as StarsTechnique};
