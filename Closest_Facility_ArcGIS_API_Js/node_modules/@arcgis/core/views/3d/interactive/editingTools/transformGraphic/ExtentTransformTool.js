/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import e from"../../../../../core/Evented.js";import i from"../../../../../core/Handles.js";import{makeHandle as a}from"../../../../../core/handleUtils.js";import{rad2deg as s}from"../../../../../core/mathUtils.js";import{isSome as r,unwrapOr as o,isNone as n,unwrap as p}from"../../../../../core/maybe.js";import{screenPointObjectToArray as h}from"../../../../../core/screenUtils.js";import{getMetersPerUnitForSR as l}from"../../../../../core/unitUtils.js";import{init as c}from"../../../../../core/watchUtils.js";import{property as d}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/has.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/Logger.js";import{subclass as u}from"../../../../../core/accessorSupport/decorators/subclass.js";import{r as m}from"../../../../../chunks/mat4.js";import{a as g,f as y,s as v}from"../../../../../chunks/vec2.js";import{a as f}from"../../../../../chunks/vec2f64.js";import{g as M,F as S,f as b,n as B,l as w,d as x}from"../../../../../chunks/vec3.js";import{c as G,a as D}from"../../../../../chunks/vec3f64.js";import{containsXY as j}from"../../../../../geometry/support/aaBoundingRect.js";import{a as O,c as R}from"../../../../../chunks/boundedPlane.js";import{intersectRay as E,create as A,normal as P}from"../../../../../geometry/support/plane.js";import{create as z}from"../../../../../geometry/support/ray.js";import{sv2d as U,sv3d as k,sm4d as T}from"../../../../../geometry/support/vectorStacks.js";import{getGraphicEffectiveElevationInfo as Z}from"../../../../../support/elevationInfoUtils.js";import{Manipulator3D as V}from"../../Manipulator3D.js";import{getGraphicAttachmentOrigin as _,calculateInputRotationTransform as C}from"../../manipulatorUtils.js";import{createShiftManipulator as H,IsShiftEdgeOnScreenFlag as I,createResizeManipulator as X,createRotateManipulator as Y,resizeNormal as F,resizeOutlineOnly as L,isDiagonalResizeHandle as N,calculateDiagonalResizeHandleScale as q,createRotatePlane as J,calculateBoundedPlaneTranslateRotate as K,updateRotateHeadingHandle as Q,updateResizeHandle as W}from"../../analysisTools/slice/sliceToolUtils.js";import $ from"../../analysisTools/slice/images/heading-rotate-png.js";import{screenToZConstrained as tt,screenToRenderPlane as et}from"../dragEventPipeline3D.js";import{canMoveZ as it}from"../manipulatorUtils.js";import{createVisualElements as at}from"../visualElementUtils.js";import{MoveXYGraphicManipulation as st}from"../manipulations/MoveXYGraphicManipulation.js";import{PreserveAspectRatio as rt}from"./PreserveAspectRatio.js";import{OutlineVisualElement as ot}from"../../visualElements/OutlineVisualElement.js";import{evaluateElevationAlignmentAtPoint as nt}from"../../../layers/graphics/elevationAlignmentUtils.js";import{ElevationContext as pt}from"../../../layers/graphics/ElevationContext.js";import{GraphicState as ht}from"../../../layers/graphics/GraphicState.js";import{fromScreen as lt}from"../../../support/geometryUtils/ray.js";import{Texture as ct}from"../../../webgl-engine/lib/Texture.js";import{createManipulatorDragEventPipeline as dt,addMapDelta as ut,addScreenDelta as mt}from"../../../../interactive/dragEventPipeline.js";import{InteractiveToolBase as gt}from"../../../../interactive/InteractiveToolBase.js";import{EditGeometryOperations as yt}from"../../../../interactive/editGeometry/EditGeometryOperations.js";import{calculateOrientedBounds as vt,mapPlaneToRenderPlane as ft,apply as Mt,unapply as St}from"../../../../interactive/editGeometry/support/editPlaneUtils.js";let bt=class extends(e.EventedMixin(gt)){constructor(t){super(t),this.enableZ=!0,this.enableRotation=!0,this.enableScaling=!0,this._preserveAspectRatio=new rt,this.grabbing=!1,this.inputState=null,this.type="transform-3d",this.handles=new i,this.moveZManipulator=null,this.resizeManipulators=null,this.rotateManipulator=null,this.attachmentOrigin=null,this.outlineVisualElement=null,this.mapBounds=O(),this.mapBoundsStart=O(),this.displayBounds=O(),this.displayBoundsStart=O(),this.displayBoundsMarginStart=0,this.resizeHandles=[{direction:[1,0]},{direction:[1,1]},{direction:[0,1]},{direction:[-1,1]},{direction:[-1,0]},{direction:[-1,-1]},{direction:[0,-1]},{direction:[1,-1]}]}initialize(){this.graphicState=new ht({graphic:this.graphic});const t=this.graphic.geometry;this.editGeometryOperations=yt.fromGeometry(t,this.view.state.viewingMode),this.graphicMoveManipulation=new st({tool:this,view:this.view,graphicState:this.graphicState}),this.handles.add(this.createMoveXYGraphicDragPipeline()),this.moveZManipulator=H(this.view,0),this.moveZManipulator.state|=I,this.handles.add(this.watch("enableZ",(()=>this.updateManipulatorAvailability(this.moveZManipulator,0)))),this.handles.add(this.createMoveZDragPipeline()),this.manipulators.add(this.moveZManipulator),this.resizeManipulators=this.resizeHandles.map((t=>{const e=X(this.view,t);return this.handles.add(this.watch("enableScaling",(()=>this.updateManipulatorAvailability(e,2)))),e.events.on("grab-changed",(t=>this.onResizeGrab(t))),this.handles.add(this.createResizeDragPipeline(e,t)),e})),this.manipulators.addMany(this.resizeManipulators),this.rotateManipulatorTexture=new ct($,{width:64,height:64,mipmap:!0,preMultiplyAlpha:!0}),this.view._stage&&this.view._stage.add(this.rotateManipulatorTexture),this.rotateManipulator=Y(this.view,this.rotateManipulatorTexture),this.handles.add(this.watch("enableRotation",(()=>this.updateManipulatorAvailability(this.rotateManipulator,3)))),this.rotateManipulator.events.on("grab-changed",(t=>{this.onRotateGrab(t)})),this.handles.add(this.createRotateDragPipeline(this.rotateManipulator)),this.manipulators.add(this.rotateManipulator),this.calculateMapBounds(),this.updateDisplayBounds();const e=at({view:this.view,graphic:this.graphic,forEachManipulator:t=>this.forEachManipulator(t),onManipulatorsChanged:()=>a()});r(e)&&(this.outlineVisualElement=e.visualElement instanceof ot?e.visualElement:null),r(this.outlineVisualElement)&&this.handles.add(this.outlineVisualElement.events.on("attachment-origin-changed",(()=>this.updateDisplayBounds()))),this.handles.add(e),this.handles.add([this.graphicState.on("changed",(()=>this.onGeometryChanged())),this.graphicState.watch("displaying",(()=>this.updateAllManipulatorAvailability())),c(this.graphicState,"isDraped",(()=>this.graphicDrapedChanged())),this.view.trackGraphicState(this.graphicState)]);const i=this.view.pointsOfInterest;i&&this.handles.add(i.centerOnSurfaceFrequent.watch("location",(()=>this.updateDisplayBounds())));const s=t=>{this.handles.add(t.events.on("grab-changed",(()=>{this.grabbing=t.grabbing,this.updateAllManipulatorAvailability()})))};this.forEachManipulator(s);const o=(t,e)=>{this.handles.add(t.events.on("immediate-click",(t=>{1===e&&this.emit("immediate-click",{...t,graphic:this.graphic}),t.stopPropagation()})))};this.forEachManipulator(o),this.onGeometryChanged(),this.updateAllManipulatorAvailability(),this.complete()}graphicDrapedChanged(){this.handles.remove(Bt),this.updateDisplayBounds(),this.graphicState.isDraped&&this.handles.add(this.view.elevationProvider.on("elevation-change",(t=>{r(this.attachmentOrigin)&&j(t.extent,this.attachmentOrigin.x,this.attachmentOrigin.y)&&this.updateDisplayBounds()})),Bt)}updateAllManipulatorAvailability(){this.forEachManipulator(((t,e)=>this.updateManipulatorAvailability(t,e)))}updateManipulatorAvailability(t,e){const i=this.grabbing&&!t.grabbing;if(t.interactive=!i,t instanceof V){const a=this.graphicState.displaying,s=this.enableZ&&it(this.graphic);switch(e){case 3:t.available=a&&this.enableRotation;break;case 2:t.available=a&&(this.enableScaling||this.enableRotation||s),t.interactive=!i&&this.enableScaling,t.state=this.enableScaling?F:L;break;case 0:t.available=a&&s;break;default:t.available=a}}}forEachManipulator(t){this.graphicMoveManipulation.forEachManipulator(t),this.resizeManipulators.forEach((e=>t(e,2))),t(this.rotateManipulator,3),t(this.moveZManipulator,0)}destroy(){this.view._stage&&this.view._stage.remove(this.rotateManipulatorTexture),this.handles.destroy(),this.graphicMoveManipulation.destroy(),this.editGeometryOperations.destroy(),this._set("view",null),this._set("graphic",null)}get preserveAspectRatio(){return this._preserveAspectRatio.enabled}set preserveAspectRatio(t){this._preserveAspectRatio.enabled=t,this._set("preserveAspectRatio",t)}reset(){}onDetach(){this.mapBounds=null,this.displayBounds=null}onGeometryChanged(){this.updateDisplayBounds()}calculateMapBounds(){const t=this.graphic.geometry,e=this.editGeometryOperations.data,i=e.components[0].edges[0],a=g(U.get(),i.leftVertex.pos,i.rightVertex.pos);y(a,a);const s=o(_(this.view,this.graphic),t.extent.center);let r=xt*this.view.pixelSizeAt(s);const n=this.view.spatialReference;n!==t.spatialReference&&(r*=l(n)/l(t.spatialReference)),vt(a,e,r,this.mapBounds)}updateDisplayBounds(){const t=this.graphic.geometry,e=r(this.outlineVisualElement)&&!this.graphicState.isDraped&&r(this.outlineVisualElement.attachmentOrigin)?this.outlineVisualElement.attachmentOrigin:_(this.view,this.graphic);this.attachmentOrigin=o(e,t.extent.center);const i=r(e)?e.z:nt(this.mapBounds.origin,this.view.elevationProvider,pt.fromElevationInfo(Z(this.graphic)),this.view.renderCoordsHelper),a=R(this.mapBounds);a.origin[2]=i,ft(a,this.view.renderCoordsHelper,t.spatialReference,this.displayBoundsMargin,this.displayBounds),this.updateManipulators()}get displayBoundsMargin(){const t=this.view.pointsOfInterest,e=t?t.centerOnSurfaceFrequent.location:this.editGeometryOperations.data.geometry.extent.center;return wt*this.view.pixelSizeAt(e)}createMoveXYGraphicDragPipeline(){return this.graphicMoveManipulation.createDragPipeline(((t,e,i)=>this.applyGraphicMoveSteps(e,i)))}createMoveZDragPipeline(){const t=this.view,e=this.editGeometryOperations.data.spatialReference;return dt(this.moveZManipulator,((i,a,s)=>{const r=D(i.renderLocation),o=a.next(tt(t,r,e)).next(mt());this.applyGraphicMoveSteps(o,s)}))}applyGraphicMoveSteps(t,e){const i=t.next((t=>("start"===t.action&&(this.inputState={type:"move"},R(this.mapBounds,this.mapBoundsStart),this.emit("graphic-translate-start",{graphic:this.graphic,dxScreen:t.screenDeltaX,dyScreen:t.screenDeltaY})),t))).next(ut()).next(this.moveDragUpdateGeometry()).next((t=>{const e={graphic:this.graphic,dxScreen:t.screenDeltaX,dyScreen:t.screenDeltaY};switch(t.action){case"start":case"update":(t.mapEnd.x-t.mapStart.x||t.mapEnd.y-t.mapStart.y||t.mapEnd.z-t.mapStart.z)&&this.emit("graphic-translate",e);break;case"end":this.inputState=null,this.emit("graphic-translate-stop",e)}return t}));return e.next((()=>{r(this.inputState)&&this.emit("graphic-translate-stop",{graphic:this.graphic,dxScreen:0,dyScreen:0}),this.cancel()})),i}moveDragUpdateGeometry(){return t=>{if(n(this.inputState)||"move"!==this.inputState.type)return t;const e=[];for(const s of this.editGeometryOperations.data.components)e.push(...s.vertices);const i="start"===t.action?0:1,a=this.editGeometryOperations.moveVertices(e,t.mapDeltaX,t.mapDeltaY,t.mapDeltaZ,i);return Mt(a,this.mapBounds),this.graphic.geometry=this.editGeometryOperations.data.geometry,t}}onResizeGrab(t){if("start"!==t.action)return;const e=this.calculatePickRay(t.screenPoint);E(this.displayBounds.plane,e,k.get())&&(R(this.displayBounds,this.displayBoundsStart),R(this.mapBounds,this.mapBoundsStart),this.displayBoundsMarginStart=this.displayBoundsMargin,this.inputState={type:"resize"})}createResizeDragPipeline(t,e){return dt(t,((t,i,a)=>{n(this.inputState)||(i.next((t=>("start"===t.action&&this.emit("graphic-scale-start",{graphic:this.graphic,xScale:1,yScale:1}),t))).next(et(this.view,this.displayBoundsStart.plane)).next((t=>({...t,handle:e}))).next(this.resizeDragRenderPlaneToFactors()).next(this._preserveAspectRatio.createDragEventPipelineStep(),this._preserveAspectRatio.next).next(this.resizeDragUpdateGeometry()).next((t=>{const e={graphic:this.graphic,xScale:t.factor1,yScale:t.factor2};switch(t.action){case"start":case"update":this.emit("graphic-scale",e);break;case"end":this.inputState=null,this.emit("graphic-scale-stop",e)}return t})),a.next((()=>{r(this.inputState)&&this.emit("graphic-scale-stop",{graphic:this.graphic,xScale:1,yScale:1}),this.cancel()})))}))}resizeDragRenderPlaneToFactors(){return t=>{const e=this.displayBoundsStart,i=t.handle.direction,a=this.displayBoundsMargin,s=this.displayBoundsMarginStart,r=M(k.get(),e.origin);S(r,r,e.basis1,-i[0]),S(r,r,e.basis2,-i[1]);const o=b(k.get(),t.renderEnd,r),n=b(k.get(),t.renderStart,r),p=N(t.handle),h=q(e),l=q(this.displayBounds)/h,c=(t,e)=>{if(0===t)return 1;let i=w(e),r=.5*t*x(e,o)/i;const h=r<0?-1:1;if(p){r+=(i-.5*t*x(e,n)/i)*h*l}const c=i<1.5*s?1:Gt;return i=Math.max(i-s,Gt),h>0&&(r-=a),h*Math.max(h*(r/i),c)};return{...t,factor1:c(i[0],e.basis1),factor2:c(i[1],e.basis2)}}}resizeDragUpdateGeometry(){return t=>{const e=M(G(),this.mapBoundsStart.origin);S(e,e,this.mapBoundsStart.basis1,-t.handle.direction[0]),S(e,e,this.mapBoundsStart.basis2,-t.handle.direction[1]);const i=v(f(),this.mapBoundsStart.basis1[0],this.mapBoundsStart.basis1[1]);y(i,i);const a=[];for(const o of this.editGeometryOperations.data.components)a.push(...o.vertices);const s="start"===t.action?0:1,r=this.editGeometryOperations.scaleVertices(a,e,i,t.factor1,t.factor2,s,1);return R(this.mapBoundsStart,this.mapBounds),Mt(r,this.mapBounds),this.graphic.geometry=this.editGeometryOperations.data.geometry,t}}onRotateGrab(t){if("start"!==t.action)return;const e=J(this.displayBounds,this.view.renderCoordsHelper,1,A()),i=this.calculatePickRay(t.screenPoint);E(e,i,k.get())&&(R(this.displayBounds,this.displayBoundsStart),R(this.mapBounds,this.mapBoundsStart),this.inputState={type:"rotate",rotatePlane:e})}createRotateDragPipeline(t){return dt(t,((t,e,i)=>{const a=this.inputState;n(a)||(e.next((t=>("start"===t.action&&this.emit("graphic-rotate-start",{graphic:this.graphic,angle:0}),t))).next(et(this.view,a.rotatePlane)).next(this.rotateDragRenderPlaneToRotate(a)).next(this.rotateDragUpdateGeometry()).next((t=>{const e={graphic:this.graphic,angle:s(t.rotateAngle)};switch(t.action){case"start":case"update":this.emit("graphic-rotate",e);break;case"end":this.inputState=null,this.emit("graphic-rotate-stop",e)}return t})),i.next((()=>{r(this.inputState)&&this.emit("graphic-rotate-stop",{graphic:this.graphic,angle:0}),this.cancel()})))}))}rotateDragRenderPlaneToRotate(t){return e=>{const i=P(t.rotatePlane),a=C(e.renderStart,e.renderEnd,this.displayBounds.origin,i);return{...e,rotateAxis:i,rotateAngle:a}}}rotateDragUpdateGeometry(){return t=>{const e=M(G(),this.mapBoundsStart.origin),i=[];for(const r of this.editGeometryOperations.data.components)i.push(...r.vertices);const a="start"===t.action?0:1,s=this.editGeometryOperations.rotateVertices(i,e,t.rotateAngle,a,1);return R(this.mapBoundsStart,this.mapBounds),Mt(s,this.mapBounds),this.graphic.geometry=this.editGeometryOperations.data.geometry,t}}calculatePickRay(t){const e=z(),i=h(t);return lt(this.view.state.camera,i,e),B(e.direction,e.direction),e}updateManipulators(){if(!this.visible)return;const t=K(this.displayBounds,T.get());Q(this.rotateManipulator,t,this.displayBounds,this.view.renderCoordsHelper),this.updateZMoveHandle(this.moveZManipulator,t),this.resizeManipulators.forEach(((e,i)=>{W(e,this.resizeHandles[i],t,this.displayBounds)}))}updateZMoveHandle(t,e){const i=this.displayBounds,a={basis:i.basis1,direction:-1,position:b(k.get(),i.origin,i.basis1),edge:2},s=T.get();m(s,e,a.edge*Math.PI/2),s[12]=0,s[13]=0,s[14]=0,t.modelTransform=s,t.renderLocation=a.position}cancel(){const t=this.editGeometryOperations.lastOperation;n(t)||(this.editGeometryOperations.undo(),this.graphic.geometry=this.editGeometryOperations.data.geometry,St(t,this.mapBounds),this.updateDisplayBounds(),this.inputState=null)}get canUndo(){return this.editGeometryOperations.canUndo}undo(){if(r(this.inputState))this.view.activeTool=null;else if(this.canUndo){const t=this.editGeometryOperations.undo();this.graphic.geometry=this.editGeometryOperations.data.geometry,St(p(t),this.mapBounds),this.updateDisplayBounds()}}get canRedo(){return this.editGeometryOperations.canRedo}redo(){if(this.canRedo){const t=this.editGeometryOperations.redo();this.graphic.geometry=this.editGeometryOperations.data.geometry,Mt(p(t),this.mapBounds),this.updateDisplayBounds()}}get test(){return{resizeManipulators:this.resizeManipulators,rotateManipulator:this.rotateManipulator,moveZManipulator:this.moveZManipulator}}};t([d({constructOnly:!0,nonNullable:!0})],bt.prototype,"view",void 0),t([d({constructOnly:!0,nonNullable:!0})],bt.prototype,"graphic",void 0),t([d({constructOnly:!0,nonNullable:!0})],bt.prototype,"enableZ",void 0),t([d()],bt.prototype,"enableRotation",void 0),t([d()],bt.prototype,"enableScaling",void 0),t([d()],bt.prototype,"preserveAspectRatio",null),t([d()],bt.prototype,"grabbing",void 0),t([d()],bt.prototype,"inputState",void 0),t([d({readOnly:!0})],bt.prototype,"type",void 0),bt=t([u("esri.views.3d.interactive.editingTools.graphicTransform3D.ExtentTransformTool")],bt);const Bt="draped-elevation-changes",wt=10,xt=80,Gt=1e-6;export{Gt as EPSILON,bt as ExtentTransformTool};
