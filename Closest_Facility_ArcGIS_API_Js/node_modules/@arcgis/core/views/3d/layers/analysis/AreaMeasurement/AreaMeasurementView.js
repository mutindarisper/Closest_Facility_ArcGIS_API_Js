/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../intl.js";import t from"../../../../../core/Accessor.js";import"../../../../../core/has.js";import i from"../../../../../core/Handles.js";import{nextHighestPowerOfTen as s,applyOpacity as r}from"../../../../../core/mathUtils.js";import{destroyMaybe as n,isNone as a,isSome as o,unwrap as l}from"../../../../../core/maybe.js";import h from"../../../../../core/Quantity.js";import{formatDecimal as m}from"../../../../../core/quantityFormatUtils.js";import{convertUnit as c,preferredImperialAreaUnit as p,preferredMetricAreaUnit as d,preferredImperialLengthUnit as u,preferredMetricLengthUnit as g}from"../../../../../core/unitUtils.js";import{property as L}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/Logger.js";import{subclass as _}from"../../../../../core/accessorSupport/decorators/subclass.js";import{reactionInit as b}from"../../../../../core/accessorSupport/trackingUtils.js";import{i as v,t as f}from"../../../../../chunks/mat4.js";import{c as w}from"../../../../../chunks/mat4f64.js";import{f as S}from"../../../../../chunks/vec3.js";import{c as y}from"../../../../../chunks/vec3f64.js";import{c as j}from"../../../../../chunks/vec4f64.js";import C from"../../../interactive/measurementTools/support/measurementUtils.js";import{midpoint as P}from"../../../interactive/measurementTools/support/viewUtils.js";import{LabelVisualElement as V}from"../../../interactive/visualElements/LabelVisualElement.js";import{LineVisualElement as A}from"../../../interactive/visualElements/LineVisualElement.js";import{MeasurementAreaVisualElement as D}from"../../../interactive/visualElements/MeasurementAreaVisualElement.js";import{GeodesicSegment as M,EuclideanSegment as R}from"../../../interactive/visualElements/support/Segment.js";import{createStipplePatternSimple as I}from"../../../webgl-engine/materials/lineStippleUtils.js";import{onLocaleChange as z}from"../../../../../intl/locale.js";import{fetchMessageBundle as O}from"../../../../../intl/messages.js";let U=class extends t{constructor(e){super(e),this._handles=new i,this._params={...k},this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._pathLengthLabel=null,this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._cursorSegment=null,this._origin=y(),this._originTransform=w(),this._cursorPositionRenderSpace=y(),this.messages=null,this.viewData=q,this.areaLabel=null,this.perimeterLengthLabel=null,this.mode=0,this.loadingMessages=!0,this.geodesicMeasurementDistanceThreshold=1e5}get visible(){return this.layerView.visible&&!this.layerView.suspended}get testData(){return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel}}}initialize(){const e=this.view,t=this._params;this._path=new A({view:e,attached:!0,width:t.pathLineWidth,color:t.pathLineColor,polygonOffset:!0,renderOccluded:4}),this._intersectedPath=new A({view:e,attached:!0,width:t.pathLineWidth,color:t.intersectingLineColor,polygonOffset:!0,renderOccluded:4}),this._perimeter=new A({view:e,attached:!0,width:t.perimeterLineWidth,color:t.perimeterLineColor,polygonOffset:!0,renderOccluded:4}),this._intersectedPerimeter=new A({view:e,attached:!0,width:t.perimeterLineWidth,color:t.intersectingLineColor,polygonOffset:!0,renderOccluded:4}),this._projectionLines=new A({view:e,attached:!0,width:t.projectionLineWidth,color:t.projectionLineColor,stipplePattern:I(t.projectionLineStippleSize),stippleIntegerRepeats:!1,polygonOffset:!0,renderOccluded:4}),this._measurementArea=new D({view:e,attached:!0,color1:t.areaColor1,color2:t.areaColor2}),this._areaLabel=new V({view:this.view,attached:!0,fontSize:16}),this._pathLengthLabel=new V({view:e,attached:!0,fontSize:12}),this._cursorSegmentLengthLabel=new V({view:e,attached:!0,fontSize:12}),this._perimeterLengthLabel=new V({view:e,attached:!0,fontSize:12});const i=this.layerView,s=i.layerViewData;this._handles.add([b((()=>[this.mode,this.visible,i.unit,s.measurementData,s.cursorPoint]),(()=>this._update())),b((()=>{var t;return null==(t=e.state)?void 0:t.camera}),(()=>this._updateLabels())),z((async()=>this._updateMessageBundle())),b((()=>this.layerView.fullOpacity),(()=>this._updateVisualElementsOpacity()))]),this._updateMessageBundle()}destroy(){this._measurementArea=n(this._measurementArea),this._path=n(this._path),this._intersectedPath=n(this._intersectedPath),this._perimeter=n(this._perimeter),this._intersectedPerimeter=n(this._intersectedPerimeter),this._areaLabel=n(this._areaLabel),this._pathLengthLabel=n(this._pathLengthLabel),this._cursorSegmentLengthLabel=n(this._cursorSegmentLengthLabel),this._perimeterLengthLabel=n(this._perimeterLengthLabel),this._handles=n(this._handles),this.set("view",null)}_update(){if(this.destroyed)return;const e=this.layerView.layerViewData.measurementData;a(e)||(this._updateViewData(e,this.layerView.layerViewData.path,this.layerView.layerViewData.cursorPoint),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(e,t,i){const r=t.isValidPolygon,n=t.lastPoint,a=o(n)&&o(i)?new h(C.segmentLengthGeodesic(n,i),"meters"):null,l=o(n)&&o(i)?new h(e.unitNormalizer.normalizeDistance(C.segmentLengthEuclidean(n,i,e.unitNormalizer.spatialReference)),"meters"):null;let m=this.mode;if(0===this.mode){m=1;(e.geodesicPathLength?e.geodesicPathLength.value:0)+(!r&&o(a)?a.value:0)>this.geodesicMeasurementDistanceThreshold&&(m=2)}null==e.geodesicPathLength&&(m=1);const p=2===m,d=p?e.geodesicArea:e.area;let u=1;if(d){const t=this._toPreferredAreaUnit(d,this.layerView.unit);u=s(Math.sqrt(t.value)/Math.sqrt(300)),u*=Math.sqrt(c(1,t.unit,"square-meters")),u/=e.unitNormalizer.normalizeDistance(1)}const g={validMeasurement:r,path:t,pathVersion:t.version,cursorPoint:i,measurementData:e,mode:m,positionsGeographic:e.positionsGeographic,positionsRenderCoords:e.positionsRenderCoords,positionsProjected:e.positionsProjectedWorldCoords,positionsFittedRenderCoords:e.positionsFittedRenderCoords,intersectingSegments:p?e.geodesicIntersectingSegments:e.intersectingSegments,triangleIndices:p?e.geodesicTriangleIndices:e.triangleIndices,fittingMode:e.fittingMode,areaCentroid:p?e.geodesicAreaCentroidRenderCoords:e.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:r?0:t.numVertices-2,perimeterLengthLabelSegmentIndex:0,checkerSize:u,geodesicCursorSegmentLength:a,cursorSegmentLength:l};this._set("viewData",g)}_updateOrigin(){const e=this.viewData;P(e.positionsRenderCoords,this._origin),v(this._originTransform),f(this._originTransform,this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(e){const t=this.viewData,i=t.path,s=this.view.renderCoordsHelper.spatialReference,r=t.mode,n=[],a=[],o=[],l=t.validMeasurement?i.numVertices:i.numVertices-1;for(let h=0;h<l;++h){const l=t[e][h],m=t[e][(h+1)%i.numVertices];let c=null;switch(r){case 1:c=new R(l,m);break;case 2:c=new M(l,m,s)}t.intersectingSegments.has(h)?o.push(c):a.push(c),n.push(c)}return{all:n,nonIntersecting:a,intersecting:o}}_updatePathSegments(){const e=this.visible,t=this.viewData,i=this._createSegments("positionsRenderCoords"),s=t.path,r=!s.isValidPolygon,n=t.cursorPoint,a=this.view.renderCoordsHelper,l=a.spatialReference,h=t.mode;if(this._cursorSegment=null,s.numVertices>0&&r&&o(n)){if(a.toRenderCoords(n,this._cursorPositionRenderSpace)){const e=t.positionsRenderCoords[s.numVertices-1],r=this._cursorPositionRenderSpace;let n=null;switch(h){case 1:n=new R(e,r);break;case 2:n=new M(e,r,l)}i.nonIntersecting.push(n),this._cursorSegment=n}}this._path.setGeometryFromSegments(i.nonIntersecting,this._origin),this._path.visible=e,this._intersectedPath.setGeometryFromSegments(i.intersecting,this._origin),this._intersectedPath.visible=e,this._pathSegments=i.all}_updatePerimeterSegments(){const e=this.visible&&1===this.viewData.mode,t=this._createSegments("positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(t.nonIntersecting,this._origin),this._perimeter.visible=e,this._intersectedPerimeter.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPerimeter.visible=e,this._perimeterSegments=t.all}_updateArea(){const e=this.viewData;switch(e.mode){case 1:this._updateAreaEuclidean(e);break;case 2:this._updateAreaGeodesic()}}_updateAreaEuclidean(e){const t=this.visible;e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices?(this._measurementArea.geometry={uv:e.positionsProjected,position:e.positionsFittedRenderCoords,triangleIndices:e.triangleIndices},this._measurementArea.size=[e.checkerSize,e.checkerSize],this._measurementArea.visible=t):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const e=this.viewData,t=this.visible,i=e.path,s=e.mode;if(i.numVertices>0&&e.validMeasurement&&1===s){const s=[];for(let t=0;t<i.numVertices;++t){const i=y();S(i,e.positionsRenderCoords[t],this._origin);const r=y();S(r,e.positionsFittedRenderCoords[t],this._origin),s.push([i,r])}this._projectionLines.geometry=s,this._projectionLines.visible=t}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const e=this.viewData,t=e.path;if(!t)return;const i=e.measurementData,s=e.mode,r=!t.isValidPolygon,n=this.visible,a=this._formatAreaLabel(this.messages,2===s?i.geodesicArea:i.area,this.layerView.unit);o(a)?(this._areaLabel.geometry={type:"point",point:e.areaCentroid},this._areaLabel.text=a,this._areaLabel.visible=e.validMeasurement&&0===e.intersectingSegments.size&&n):this._areaLabel.visible=!1,this._set("areaLabel",l(a));const h=this._formatLengthLabel(this.messages,2===s?i.geodesicPathLength:i.pathLength,this.layerView.unit);if(o(h)&&e.pathLengthLabelSegmentIndex>=0&&e.pathLengthLabelSegmentIndex<this._pathSegments.length){const i=this._pathSegments[e.pathLengthLabelSegmentIndex],s=o(this._cursorSegment)?this._cursorSegment:x;this._pathLengthLabel.distance=this._params.labelDistance,this._pathLengthLabel.geometry={type:"corner",left:i,right:s},this._pathLengthLabel.text=h,this._pathLengthLabel.visible=r&&t.numVertices>0&&n}else this._pathLengthLabel.visible=!1;const m=2===s?e.geodesicCursorSegmentLength:e.cursorSegmentLength;if(o(m)){const e=this._formatLengthLabel(this.messages,m,this.layerView.unit);this._cursorSegmentLengthLabel.distance=this._params.labelDistance,this._cursorSegmentLengthLabel.geometry=o(this._cursorSegment)?{type:"segment",segment:this._cursorSegment,sampleLocation:"end"}:null,this._cursorSegmentLengthLabel.anchor="bottom",this._cursorSegmentLengthLabel.text=l(e),this._cursorSegmentLengthLabel.visible=r&&0!==m.value&&n}else this._cursorSegmentLengthLabel.visible=!1;this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1);const c=2===e.mode,p=c?i.geodesicPathLength:i.perimeterLength,d=l(null!=p?this._formatLengthLabel(this.messages,p,this.layerView.unit):null);if(this._set("perimeterLengthLabel",l(d)),e.validMeasurement&&0===e.intersectingSegments.size){this._perimeterLengthLabel.distance=this._params.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=d,this._perimeterLengthLabel.visible=!0;let t=!0;for(let i=0;i<e.path.numVertices;++i){const s=(e.perimeterLengthLabelSegmentIndex+i)%e.path.numVertices,r=c?this._pathSegments[s]:this._perimeterSegments[s];if(t=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:r,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;t=!1}this._perimeterLengthLabel.visible=t&&n}else this._perimeterLengthLabel.visible=!1}_toPreferredAreaUnit(e,t){return e.toUnit(this._preferredAreaUnit(e,t))}_preferredAreaUnit(e,t){switch(t){case"metric":return d(e.value,e.unit);case"imperial":return p(e.value,e.unit);default:return t}}_preferredLengthUnit(e,t){const i=this._deriveLengthUnitFromAreaUnit(t);switch(i){case"metric":return g(e.value,e.unit);case"imperial":return u(e.value,e.unit);default:return i}}_deriveLengthUnitFromAreaUnit(e){switch(e){case"metric":return"metric";case"imperial":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers";case"acres":return"imperial";case"ares":case"hectares":return"metric"}throw new Error("unhandled area unit")}_formatAreaLabel(e,t,i){return e&&t&&m(e,t,this._preferredAreaUnit(t,i))}_formatLengthLabel(e,t,i){return e&&t&&m(e,t,this._preferredLengthUnit(t,i))}_updateMessageBundle(){this.loadingMessages=!0,O("esri/core/t9n/Units").then((e=>{this.messages=e,this.view&&this._update()})).finally((()=>{this.loadingMessages=!1}))}_updateVisualElementsOpacity(){const e=this.layerView.fullOpacity,{pathLineColor:t,intersectingLineColor:i,perimeterLineColor:s,projectionLineColor:n,areaColor1:a,areaColor2:o}=this._params;this._path.color=r(E,t,e),r(E,i,e),this._intersectedPath.color=E,this._intersectedPerimeter.color=E,this._perimeter.color=r(E,s,e),this._projectionLines.color=r(E,n,e),this._measurementArea.color1=r(E,a,e),this._measurementArea.color2=r(E,o,e)}};e([L()],U.prototype,"view",void 0),e([L()],U.prototype,"messages",void 0),e([L()],U.prototype,"analysis",void 0),e([L()],U.prototype,"viewData",void 0),e([L()],U.prototype,"layerView",void 0),e([L({readOnly:!0})],U.prototype,"areaLabel",void 0),e([L({readOnly:!0})],U.prototype,"perimeterLengthLabel",void 0),e([L()],U.prototype,"mode",void 0),e([L()],U.prototype,"loadingMessages",void 0),e([L({readOnly:!0})],U.prototype,"visible",null),e([L()],U.prototype,"geodesicMeasurementDistanceThreshold",void 0),U=e([_("esri.views.3d.layers.analysis.AreaMeasurement.AreaMeasurementView")],U);const k={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,labelDistance:25},q={validMeasurement:!1,path:null,pathVersion:-1,cursorPoint:null,measurementData:null,mode:null,positionsGeographic:null,positionsRenderCoords:null,positionsProjected:null,positionsFittedRenderCoords:null,intersectingSegments:null,triangleIndices:null,fittingMode:null,areaCentroid:null,pathLengthLabelSegmentIndex:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null,geodesicCursorSegmentLength:null,cursorSegmentLength:null},x=new R(y(),y()),E=j();export{U as AreaMeasurementView};
