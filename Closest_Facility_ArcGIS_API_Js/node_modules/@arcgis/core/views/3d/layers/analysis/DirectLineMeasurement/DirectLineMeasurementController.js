/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import t from"../../../../../core/Accessor.js";import i from"../../../../../core/Handles.js";import{deg2rad as s,rad2deg as o,acosClamped as r}from"../../../../../core/mathUtils.js";import{destroyMaybe as a,isNone as n,unwrapOr as c}from"../../../../../core/maybe.js";import l from"../../../../../core/Quantity.js";import{whenOnce as p}from"../../../../../core/watchUtils.js";import{property as m}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/has.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/Logger.js";import{subclass as d}from"../../../../../core/accessorSupport/decorators/subclass.js";import{reactionInit as h}from"../../../../../core/accessorSupport/trackingUtils.js";import{i as u}from"../../../../../chunks/vec3.js";import{c as v}from"../../../../../chunks/vec3f64.js";import{geodesicLength as g}from"../../../../../geometry/geometryEngine.js";import f from"../../../../../geometry/Polyline.js";import{canProjectWithoutEngine as _,projectPointToVector as w,projectPointToWGS84ComparableLonLat as y}from"../../../../../geometry/projection.js";import{getSphericalPCPF as D,getReferenceEllipsoid as P,SphericalECEFSpatialReference as j,WGS84ECEFSpatialReference as z}from"../../../../../geometry/projectionEllipsoid.js";import{isSupported as A,geodesicLengths as b,inverseGeodeticSolver as E}from"../../../../../geometry/support/geodesicUtils.js";import{UnitNormalizer as M}from"../support/UnitNormalizer.js";import{getElevationAtPoint as k}from"../../../support/ElevationProvider.js";let R=class extends t{constructor(e){super(e),this._unitNormalizer=new M,this._handles=new i,this._tempStartPosition=v(),this._tempEndPosition=v(),this._tempCornerPosition=v()}initialize(){this._handles.add(p(this.view,"ready",(()=>this._initialize()),!0))}destroy(){this._handles=a(this._handles)}_initialize(){const e=this.view.spatialReference,t=D(e),i=t===j?z:t;this._sphericalPCPF=i;const s=_(e,i);this._unitNormalizer.spatialReference=s?i:e,this._handles.add([h((()=>({viewData:this.viewData,startPoint:this.layer.startPoint})),(({viewData:e,startPoint:t})=>{e.elevationAlignedStartPoint=this._applyElevationAlignment(t)})),h((()=>({viewData:this.viewData,endPoint:this.layer.endPoint})),(({viewData:e,endPoint:t})=>{e.elevationAlignedEndPoint=this._applyElevationAlignment(t)})),h((()=>({result:this._computedResult,viewData:this.viewData})),(({result:e,viewData:t})=>{t.result=e}))])}_applyElevationAlignment(e){if(n(e)||e.hasZ)return e;const t=e.clone();return t.z=c(k(this.view.elevationProvider,t),0),t}get _computedResult(){const{elevationAlignedStartPoint:e,elevationAlignedEndPoint:t}=this.viewData;if(n(e)||n(t))return null;const i=this._euclideanDistances(e,t),s=this._exactGeodesicDistanceAndAngle(e,t,i.horizontal.value);return{directDistance:i.direct,horizontalDistance:i.horizontal,verticalDistance:i.vertical,geodesicDistance:s.distance,geodesicAngle:s.angle}}_euclideanDistances(e,t){const i=e.clone();i.z=t.z;const s=this._tempStartPosition,o=this._tempEndPosition,r=this._tempCornerPosition,a=this.view.spatialReference,n=this._sphericalPCPF,c=_(a,n)?n:a;w(e,s,c),w(t,o,c),w(i,r,c);const p=u(s,o),m=u(r,o),d=Math.abs(t.z-e.z),h=e=>this._unitNormalizer.normalizeDistance(e),v=h(p),g=h(m),f=h(d);return{direct:new l(v,"meters"),horizontal:new l(g,"meters"),vertical:new l(f,"meters")}}_exactGeodesicDistanceAndAngle(e,t,i){const s=e.spatialReference,o=new f({spatialReference:s});o.addPath([e,t]);const r=s.isGeographic&&A(s)?b([o],"meters")[0]:s.isWebMercator?g(o,"meters"):void 0,{distance:a,angle:n}=r?{distance:r,angle:this._fallbackGeodesicAngle(r,s)}:this._fallbackGeodesicDistance(e,t,i);return{distance:new l(a,"meters"),angle:new l(n,"degrees")}}_fallbackGeodesicAngle(e,t){return e/P(t).metersPerDegree}_fallbackGeodesicDistance(e,t,i){if(y(e,G)){y(t,S);const e=s(G[0]),i=s(G[1]),a=s(S[0]),n=s(S[1]),c=Math.abs(a-e),l=r(Math.sin(i)*Math.sin(n)+Math.cos(i)*Math.cos(n)*Math.cos(c)),p=o(l),m={distance:0};return E(m,[G[0],G[1]],[S[0],S[1]]),{distance:m.distance,angle:p}}const a=e.spatialReference,n=i;return{distance:n,angle:this._fallbackGeodesicAngle(n,a)}}};e([m()],R.prototype,"view",void 0),e([m()],R.prototype,"layer",void 0),e([m()],R.prototype,"viewData",void 0),e([m()],R.prototype,"_computedResult",null),R=e([d("esri.views.3d.layers.analysis.DirectLineMeasurement/DirectLineMeasurementController")],R);const G=v(),S=v();export{R as DirectLineMeasurementController};
