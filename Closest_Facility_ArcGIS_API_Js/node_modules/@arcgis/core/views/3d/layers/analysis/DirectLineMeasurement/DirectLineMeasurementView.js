/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../intl.js";import t from"../../../../../core/Accessor.js";import i from"../../../../../core/Handles.js";import{nextHighestPowerOfTen as s,applyOpacity as n,sign as a,deg2rad as r}from"../../../../../core/mathUtils.js";import{isSome as o,isNone as l,destroyMaybe as c}from"../../../../../core/maybe.js";import{formatDecimal as h,formatDMS as d,formatImperialLength as u,formatImperialVerticalLength as m,formatMetricLength as g,formatMetricVerticalLength as p}from"../../../../../core/quantityFormatUtils.js";import{createRenderScreenPointArray3 as _,createRenderScreenPointArray as v}from"../../../../../core/screenUtils.js";import{preferredImperialLengthUnit as b,convertUnit as L}from"../../../../../core/unitUtils.js";import{whenOnce as w}from"../../../../../core/watchUtils.js";import{property as y}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/has.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/Logger.js";import{subclass as f}from"../../../../../core/accessorSupport/decorators/subclass.js";import{autorun as V,reactionInit as S}from"../../../../../core/accessorSupport/trackingUtils.js";import{h as E}from"../../../../../chunks/vec2.js";import{a as z,b as j}from"../../../../../chunks/vec3.js";import{c as P}from"../../../../../chunks/vec3f64.js";import{f as A}from"../../../../../chunks/vec4f32.js";import{c as D}from"../../../../../chunks/vec4f64.js";import{getReferenceEllipsoid as M}from"../../../../../geometry/projectionEllipsoid.js";import{LabelVisualElement as O,mirrorPosition as C}from"../../../interactive/visualElements/LabelVisualElement.js";import{LineVisualElement as G}from"../../../interactive/visualElements/LineVisualElement.js";import{MeasurementArrowVisualElement as x}from"../../../interactive/visualElements/MeasurementArrowVisualElement.js";import{RightAngleQuadVisualElement as H}from"../../../interactive/visualElements/RightAngleQuadVisualElement.js";import{GeodesicSegment as k,EuclideanSegment as R}from"../../../interactive/visualElements/support/Segment.js";import{screenSpaceTangent as T}from"../support/viewUtils.js";import{createStipplePatternSimple as U}from"../../../webgl-engine/materials/lineStippleUtils.js";import{onLocaleChange as F}from"../../../../../intl/locale.js";import{fetchMessageBundle as W}from"../../../../../intl/messages.js";let Q=class extends t{constructor(e){super(e),this._params={...I},this._handles=new i,this._segmentVisualElement=null,this._triangleVisualElement=null,this._rightAngleQuad=null,this._projectedGeodesicLine=null,this._geodesicStartHint=null,this._geodesicEndHint=null,this._segmentLabel=null,this._verticalLabel=null,this._horizontalLabel=null,this._startPosition=P(),this._endPosition=P(),this._cornerPosition=P(),this._startPositionAtSeaLevel=P(),this._endPositionAtSeaLevel=P(),this._state=0,this._segmentLabelDisplayedMeasurement=1,this._triangleOrientationOverride=null,this.messages=null,this.loadingMessages=!0,this.viewMode=0,this.visualizedMeasurement=0,this.actualVisualizedMeasurement=1,this.visualElementOrientation=0,this.triangleCollapseRatioThreshold=.03}get _geodesicDistanceExceeded(){var e;const t=this.layerView.result;return o(t)&&(null==(e=t.horizontalDistance)?void 0:e.value)>this.layer.geodesicDistanceThreshold}get ready(){return 1===this._state}get visible(){return this.layerView.visible&&!this.layerView.suspended}get allowVisualElementsOrientationChange(){return l(this._triangleOrientationOverride)}set allowVisualElementsOrientationChange(e){l(this._triangleOrientationOverride)!==e&&(l(this._triangleOrientationOverride)?this._triangleOrientationOverride=this._getActualVisualElementsOrientation():this._triangleOrientationOverride=null)}get labels(){const e=2===this.actualVisualizedMeasurement;return{direct:this._segmentLabel,horizontal:e?this._segmentLabel:this._horizontalLabel,vertical:this._verticalLabel}}get testData(){var e;return{labels:this.labels,stripeLength:null==(e=this._segmentVisualElement)?void 0:e.stripeLength}}initialize(){this._handles.add(w(this.view,"ready",(()=>this._initialize()),!0))}_initialize(){switch(this._state){case 1:throw new Error("invalid state");case 2:return}const e=this._params,t={attached:!0,view:this.view};this._segmentVisualElement=new x({...t,geometry:null,renderOccluded:4}),this._triangleVisualElement=new G({...t,width:e.triangleLineWidth,color:e.triangleColor,renderOccluded:4}),this._rightAngleQuad=new H({...t,color:B,renderOccluded:4});const i={...t,polygonOffset:!0,stippleIntegerRepeats:!1,renderOccluded:4};this._projectedGeodesicLine=new G({...i,width:e.geodesicProjectionLineWidth,color:e.geodesicProjectionLineColor,stipplePattern:U(e.guideStippleLengthPixels)}),this._geodesicStartHint=new G({...i,width:e.guideLineWidth,color:e.geodesicProjectionLineColor,stipplePattern:U(e.guideStippleLengthPixels)}),this._geodesicEndHint=new G({...i,width:e.guideLineWidth,color:e.geodesicProjectionLineColor,stipplePattern:U(e.guideStippleLengthPixels)}),this._segmentLabel=new O({...t,fontSize:e.direcLabelFontSize}),this._verticalLabel=new O({...t,fontSize:e.verticalLabelFontSize}),this._horizontalLabel=new O({...t,fontSize:e.horizontalLabelFontSize}),this._handles.add([V((()=>this._updateGeometryAndViewMode())),V((()=>this._updateVisualElementVisibility())),S((()=>this.layerView.fullOpacity),(()=>this._updateVisualElementsOpacity())),V((()=>this._updateLabelText())),V((()=>this._updateLabelVisibility())),V((()=>this._updateSegmentStripeLength())),F((async()=>this._updateMessageBundle()))]),this._state=1,this._updateMessageBundle()}destroy(){2!==this._state&&(this._handles=c(this._handles),this._segmentVisualElement=c(this._segmentVisualElement),this._triangleVisualElement=c(this._triangleVisualElement),this._rightAngleQuad=c(this._rightAngleQuad),this._projectedGeodesicLine=c(this._projectedGeodesicLine),this._geodesicStartHint=c(this._geodesicStartHint),this._geodesicEndHint=c(this._geodesicEndHint),this._segmentLabel=c(this._segmentLabel),this._verticalLabel=c(this._verticalLabel),this._horizontalLabel=c(this._horizontalLabel),this.set("view",null),this._state=2)}async whenReady(){await w(this,"ready")}_updateVisualElementVisibility(){if(this._segmentVisualElement.visible=!1,this._triangleVisualElement.visible=!1,this._rightAngleQuad.visible=!1,this._projectedGeodesicLine.visible=!1,this._geodesicStartHint.visible=!1,this._geodesicEndHint.visible=!1,this.visible)switch(this.viewMode){case 0:break;case 1:this._segmentVisualElement.visible=!0;break;case 2:this._segmentVisualElement.visible=!0,this._triangleVisualElement.visible=!0,this._rightAngleQuad.visible=!0;break;case 3:this._segmentVisualElement.visible=!0,this._projectedGeodesicLine.visible=!0,this._geodesicStartHint.visible=!0,this._geodesicEndHint.visible=!0}}_updateGeometryAndViewMode(){const e=this.view.renderCoordsHelper,{elevationAlignedStartPoint:t,elevationAlignedEndPoint:i}=this.layerView;if(l(t)||l(i)||t.equals(i)){this.viewMode=0;const e=this.visualizedMeasurement,t=0===e;return void(this.actualVisualizedMeasurement=t?1:e)}e.toRenderCoords(t,this._startPosition),e.toRenderCoords(i,this._endPosition);const s=this._getActualVisualElementsOrientation(),n=this._updateActualVisualizedMeasurement();this.viewMode=this._computeViewMode(n);let a=this._startPosition,r=this._endPosition;const o=1===s?1:-1,c=o*(e.getAltitude(r)-e.getAltitude(a));c<0&&(a=this._endPosition,r=this._startPosition);const h=2===n?new k(this._startPosition,this._endPosition,e.spatialReference):new R(this._startPosition,this._endPosition);switch(this._segmentVisualElement.geometry=h,this._updateSegmentStripeLength(),this._segmentLabelDisplayedMeasurement=n,this.viewMode){case 1:this._updateSegment(h,s);break;case 2:this._updateSegmentAndTriangle(h,s,a,r,o,c);break;case 3:this._updateSegmentAndProjection(s)}}_updateSegment(e,t){this._segmentLabel.anchor=1===t?"top":"bottom",this._segmentLabel.geometry={type:"segment",segment:e,sampleLocation:"center"}}_updateSegmentAndTriangle(e,t,i,s,n,a){const r=this.view,o=r.renderCoordsHelper,l=r.state.camera,c=this._cornerPosition;o.worldUpAtPosition(i,c),z(c,c,n*Math.abs(a)),j(c,c,i),this._triangleVisualElement.geometry=[[[i[0],i[1],i[2]],[c[0],c[1],c[2]],[s[0],s[1],s[2]]]],this._rightAngleQuad.geometry={previous:i,center:c,next:s};const h=new R(i,c),d=new R(c,s),u=q(i,s,c,t,l);this._segmentLabel.anchor=u.segment,this._segmentLabel.geometry={type:"segment",segment:e,sampleLocation:"center"},this._verticalLabel.geometry={type:"segment",segment:h,sampleLocation:"center"},this._verticalLabel.anchor=u.vertical,this._horizontalLabel.geometry={type:"segment",segment:d,sampleLocation:"center"},this._horizontalLabel.anchor=u.horizontal}_updateSegmentAndProjection(e){const t=this.view.renderCoordsHelper;t.setAltitude(this._startPositionAtSeaLevel,0,this._startPosition),t.setAltitude(this._endPositionAtSeaLevel,0,this._endPosition);const i=new k(this._startPositionAtSeaLevel,this._endPositionAtSeaLevel,t.spatialReference);this._projectedGeodesicLine.setGeometryFromSegment(i),this._geodesicStartHint.setGeometryFromSegment(new R(this._startPositionAtSeaLevel,this._startPosition)),this._geodesicEndHint.setGeometryFromSegment(new R(this._endPositionAtSeaLevel,this._endPosition)),this._segmentLabel.geometry={type:"segment",segment:i,sampleLocation:"center"},this._segmentLabel.anchor=1===e?"top":"bottom"}_updateLabelText(){if(1!==this._state)return;const e=this._segmentLabel,t=this._horizontalLabel,i=this._verticalLabel,s=this.messages,n=this.layerView.result;if(l(n)||l(s))return e.text=null,t.text=null,void(i.text=null);const a=this._getLabelsText(s,n),r=1===this._segmentLabelDisplayedMeasurement;e.text=r?a.euclideanDistance:a.geodesicDistance,t.text=a.horizontalDistance,i.text=a.verticalDistance,this.notifyChange("labels")}_updateLabelVisibility(){if(1!==this._state)return;const e=this._segmentLabel,t=this._horizontalLabel,i=this._verticalLabel;if(e.visible=!1,t.visible=!1,i.visible=!1,this.visible)switch(this.viewMode){case 1:e.visible=!0;break;case 2:e.visible=!0,t.visible=!0,i.visible=!0;break;case 3:e.visible=!0}}_getLabelsText(e,{directDistance:t,horizontalDistance:i,verticalDistance:s,geodesicDistance:n,geodesicAngle:a}){const r=this.layerView.unit,o=e=>({euclideanDistance:"",geodesicDistance:"",horizontalDistance:"",verticalDistance:"",...e});switch(r){case"metric":return o({euclideanDistance:t&&g(e,t),geodesicDistance:n&&g(e,n),horizontalDistance:i&&g(e,i),verticalDistance:s&&p(e,s)});case"imperial":return o({euclideanDistance:t&&u(e,t),geodesicDistance:n&&u(e,n),horizontalDistance:i&&u(e,i),verticalDistance:s&&m(e,s)});case"degrees":{const t=a&&h(e,a,"degrees");return o({euclideanDistance:t,geodesicDistance:t,horizontalDistance:t})}case"degrees-minutes-seconds":return o({horizontalDistance:a&&d(a)});default:return o({euclideanDistance:t&&h(e,t,r),geodesicDistance:n&&h(e,n,r),horizontalDistance:i&&h(e,i,r),verticalDistance:s&&h(e,s,r)})}}_updateSegmentStripeLength(){const e=this._measurementArrowStripeLength,t=this._segmentVisualElement;o(e)?(t.stripeLength=e,t.stripesEnabled=!0):t.stripesEnabled=!1}_computeViewMode(e){if(2===e){if(!this._geodesicDistanceExceeded)return 1;if(this._requiresGeodesicGuideAt(this._startPosition)||this._requiresGeodesicGuideAt(this._endPosition))return 3}const t=this.layerView.result;if(l(t))return 1;const{verticalDistance:i,horizontalDistance:s}=t,n=i.value,a=s.value;return Math.min(n/a,a/n)<this.triangleCollapseRatioThreshold?1:2}_getActualVisualElementsOrientation(){if(o(this._triangleOrientationOverride))return this._triangleOrientationOverride;const e=this.visualElementOrientation;return 0===e?this.view.state.camera.aboveGround?1:2:e}_updateActualVisualizedMeasurement(){if(0===this.visualizedMeasurement){this.actualVisualizedMeasurement=1;const e=this.layerView.unit;"degrees"!==e&&"degrees-minutes-seconds"!==e||(this.actualVisualizedMeasurement=2),this._geodesicDistanceExceeded&&(this.actualVisualizedMeasurement=2)}else this.actualVisualizedMeasurement=this.visualizedMeasurement;return this.actualVisualizedMeasurement}_requiresGeodesicGuideAt(e){const t=this.view;if(!t.state)return!1;const i=t.state.camera,s=t.renderCoordsHelper,n=i.computeScreenPixelSizeAt(e);return s.getAltitude(e)/n>=10}get _measurementArrowStripeLength(){const e=this.view,{result:t,unit:i}=this.layerView;let n=null;if(o(t)){const e=t.directDistance;switch(i){case"metric":n=e&&e.toUnit("meters");break;case"imperial":n=e&&e.toUnit(b(e.value,e.unit));break;case"degrees":case"degrees-minutes-seconds":{const e=t.geodesicAngle;n=e&&e.toUnit("degrees");break}default:n=e&&e.toUnit(i)}}if(n){let t=1;return t=s(n.value/30),t*="degrees"===n.unit?M(e.spatialReference).metersPerDegree:L(1,n.unit,"meters"),t}return null}_updateMessageBundle(){this.loadingMessages=!0,W("esri/core/t9n/Units").then((e=>{this.messages=e,this.view&&this._updateLabelText()})).finally((()=>{this.loadingMessages=!1}))}_updateVisualElementsOpacity(){const e=this.layerView.fullOpacity,t=this._params,{triangleColor:i,geodesicProjectionLineColor:s}=t;this._triangleVisualElement.color=n(K,i,e),this._rightAngleQuad.color=n(K,B,e),n(K,s,e),this._projectedGeodesicLine.color=K,this._geodesicStartHint.color=K,this._geodesicEndHint.color=K,this._segmentVisualElement.opacity=e}};function q(e,t,i,s,n){const r=N,o=X;n.projectToRenderScreen(i,r),n.projectToRenderScreen(t,o);const l={segment:"bottom",horizontal:"top",vertical:r[0]<o[0]?"left":"right"};{const s=Y,r=Z;if(T(e,i,s,n),T(e,t,r,n),E(s,r)>=J){const e=a(s[1])===a(r[1]);l.segment=e?C(l.vertical):l.vertical}else{const e=$;T(i,t,e,n),E(e,r)>=J&&(l.segment=a(e[0])===a(r[0])?C(l.horizontal):l.horizontal)}}if(2===s){const e=e=>"top"===e?"bottom":"top";l.segment=e(l.segment),l.horizontal=e(l.horizontal),l.vertical=e(l.vertical)}return l}e([y()],Q.prototype,"_state",void 0),e([y()],Q.prototype,"_segmentLabelDisplayedMeasurement",void 0),e([y()],Q.prototype,"_triangleOrientationOverride",void 0),e([y()],Q.prototype,"_geodesicDistanceExceeded",null),e([y()],Q.prototype,"messages",void 0),e([y()],Q.prototype,"view",void 0),e([y()],Q.prototype,"layer",void 0),e([y()],Q.prototype,"layerView",void 0),e([y({readOnly:!0})],Q.prototype,"ready",null),e([y()],Q.prototype,"loadingMessages",void 0),e([y({readOnly:!0})],Q.prototype,"visible",null),e([y()],Q.prototype,"viewMode",void 0),e([y()],Q.prototype,"visualizedMeasurement",void 0),e([y()],Q.prototype,"actualVisualizedMeasurement",void 0),e([y()],Q.prototype,"visualElementOrientation",void 0),e([y()],Q.prototype,"triangleCollapseRatioThreshold",void 0),e([y()],Q.prototype,"allowVisualElementsOrientationChange",null),e([y()],Q.prototype,"labels",null),e([y()],Q.prototype,"testData",null),e([y()],Q.prototype,"_measurementArrowStripeLength",null),Q=e([f("esri.views.3d.layers.DirectLineMeasurement.DirectLineMeasurementView")],Q);const B=A(1,.5,0,.75),I={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:.75,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,triangleColor:B,triangleLineWidth:3,triangleCornerSize:32,triangleSubdivisions:128,arrowWidth:16,arrowOutlineColor:[1,.5,0,1],arrowOutlineWidth:.2,arrowStripeEvenColor:[1,1,1,1],arrowStripeOddColor:[1,.5,0,1],arrowStripeLength:16,arrowSubdivisions:128,geodesicProjectionLineWidth:2,geodesicProjectionLineColor:B,guideLineWidth:2,guideLineColor:B,guideStippleLengthPixels:6,labelDistance:25,direcLabelFontSize:16,horizontalLabelFontSize:12,verticalLabelFontSize:12},J=Math.cos(r(12)),K=D(),N=_(),X=_(),Y=v(),Z=v(),$=v();export{Q as DirectLineMeasurementView};
