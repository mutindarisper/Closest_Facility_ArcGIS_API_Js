/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import t from"../../../../../core/Accessor.js";import{isNone as r,isSome as s}from"../../../../../core/maybe.js";import{screenPointObjectToArray as o}from"../../../../../core/screenUtils.js";import{property as i}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/has.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/Logger.js";import{subclass as n}from"../../../../../core/accessorSupport/decorators/subclass.js";import{g as a,d as c,a as p,n as m,b as l}from"../../../../../chunks/vec3.js";import{c as d}from"../../../../../chunks/vec3f64.js";import{create as u,copy as h,fromPoints as y}from"../../../../../geometry/support/ray.js";import{sv2d as f}from"../../../../../geometry/support/vectorStacks.js";import{getObjectId as g}from"../../../../../layers/graphics/dehydratedFeatures.js";import{fromScreen as v}from"../../../support/geometryUtils/ray.js";import{tilesAreRelated as j}from"../../../terrain/tileUtils.js";import{Intersector as w}from"../../../webgl-engine/lib/Intersector.js";import{toGraphic as I}from"../../../webgl-engine/lib/intersectorUtilsConversions.js";let b=class extends t{constructor(e){super(e)}initialize(){this.intersector=new w(this.view.state.viewingMode),this.intersector.options.hud=!1,this.intersector.options.store=0}getScreenPointIntersection(e){const t=o(e,f.get()),r=v(this.view.state.camera,t,C);return this._getRayIntersection(r)}_getRayIntersection(e){if(r(e))return null;this.view.sceneIntersectionHelper.intersectToolIntersectorRay(e,this.intersector);const t=this.intersector.results.min,o=R;if(!t||!t.getIntersectionPoint(o))return null;const i=this.view.renderCoordsHelper.fromRenderCoords(o,this.view.spatialReference),n=d();a(n,t.normal);const m=c(n,e.direction)>0?-1:1;p(n,n,m);const l=I(t,this.view);if(s(l)){const r=l.layer,s=l.sourceLayer;let o;if(s)switch(s.type){case"scene":o=g(l,s.objectIdField);break;case"integrated-mesh":{const e=t.target;o=`${e.metadata.nodeIndex}/${e.metadata.componentIndex}`;break}default:o=l.uid}else o=l.uid;return{type:"Graphic",id:`${r.uid}/${o}`,ray:h(e),normal:n,point:i}}if("TerrainRenderer"===t.intersector){return{type:"Terrain",id:t.target.metadata.tile.lij.slice(),ray:h(e),normal:n,point:i}}return null}_canUpdateFromIntersectionResult(e,t){if(r(e)||!t||e.type!==t.type)return!1;switch(e.type){case"Terrain":{const r=e.id,s=t.id;return r[0]===s[0]&&r[1]===s[1]&&r[2]===s[2]||j(r,s)}case"Graphic":case"I3S":return e.id===t.id}}updateFromIntersectionResult(e){let t;if("Terrain"===e.type&&s(e.point)){const r=R,s=S,o=T;this.view.renderCoordsHelper.toRenderCoords(e.point,s),this.view.renderCoordsHelper.worldUpAtPosition(s,o);const i=this.view.basemapTerrain.elevationBounds,n=this.view.renderCoordsHelper.getAltitude(s),a=i?Math.abs(i.max-i.min)/Math.abs(n):100,c=n>0?1:-1;m(o,o),p(o,o,c*a),l(r,s,o),y(r,s,C),t=this._getRayIntersection(C)}else t=this._getRayIntersection(e.ray);return this._canUpdateFromIntersectionResult(t,e)?t.point:null}};e([i()],b.prototype,"view",void 0),e([i()],b.prototype,"intersector",void 0),b=e([n("esri.views.3d.interactive.analysisTools.lineOfSight.LineOfSightRayIntersector")],b);const R=d(),S=d(),T=d(),C=u();export{b as LineOfSightRayIntersector};
