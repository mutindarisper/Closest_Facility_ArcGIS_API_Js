/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../core/maybe.js";import{throwIfAborted as t,createAbortController as r,onAbort as s,createAbortError as u}from"../../../core/promiseUtils.js";import{isSVG as o}from"../../../core/urlUtils.js";import{Texture as i}from"../webgl-engine/lib/Texture.js";import{testWebGLDriver as n}from"../webgl-engine/lib/WebGLDriverTest.js";import{TaskPriority as a,ImmediateTask as l}from"../../support/Scheduler.js";class h{constructor(t,r,s,u){this._streamDataRequester=t,this._stage=r,this._textureOptions=s,this._textureRequests=new Map,this._frameTask=e(u)?u.registerTask(a.TEXTURE_UNLOAD):l}destroy(){this._frameTask.remove(),this._textureRequests.forEach((e=>this.releaseTextureRequest(e))),this._textureRequests.clear()}async fromUrl(o,i,n){t(n);const a=e(n)&&n.signal,l=this.makeUid(o,i);let h=this._textureRequests.get(l);if(!h){const e=r(),t=this._streamDataRequester.request(o,"image",{uid:l,signal:e.signal});h={referenceCount:0,texture:null,textureAsync:null,abortController:e},this._textureRequests.set(l,h),h.textureAsync=t.then((e=>{const t=this.createTexture(o,e,i);return h.texture=t,h.abortController=null,this.addToStage(t),{uid:l,texture:t}}),(e=>{throw h.abortController=null,e}))}return h.referenceCount++,new Promise(((e,t)=>{s(a,(()=>{t(u())})),h.textureAsync.then(e,t)})).catch((e=>{throw this.release(l),e}))}fromData(e,t){const r=this.makeUid(e);let s=this._textureRequests.get(r);return s||(s={referenceCount:0,texture:t(),textureAsync:null,abortController:null},this.addToStage(s.texture),this._textureRequests.set(r,s)),s.referenceCount++,{uid:r,texture:s.texture}}release(e){if(!this._textureRequests)return;const t=this._textureRequests.get(e);t?(t.referenceCount<1&&console.warn("TextureCollection: reference count is < 1 for "+e),t.referenceCount--,t.referenceCount<1&&this._frameTask.schedule((()=>this.releaseNow(e)))):console.warn(`TextureCollection: texture doesn't exist: '${e}'`)}get test(){return{textureRequests:this._textureRequests}}releaseNow(e){if(!this._textureRequests)return;const t=this._textureRequests.get(e);!t||t.referenceCount>0||(this.releaseTextureRequest(t),this._textureRequests.delete(e))}releaseTextureRequest(e){e.texture?this.removeFromStage(e.texture):e.abortController&&(e.abortController.abort(),e.abortController=null)}createTexture(e,t,r){const s={...this._textureOptions,powerOfTwoResizeMode:2};if(o(e)){if(r||0===t.width&&0===t.height){const e=t.width?t.height/t.width:1;r=r||64,e>1?(t.width=Math.round(r/e),t.height=r):(t.width=r,t.height=Math.round(r*e))}this._stage.renderView&&n(this._stage.renderView.renderingContext).svgAlwaysPremultipliesAlpha&&(s.preMultiplyAlpha=!1)}return s.width=t.width,s.height=t.height,new i(t,s)}addToStage(e){this._stage.add(e)}removeFromStage(e){this._stage.remove(e)}makeUid(e,t){return null!=t?`${e}.${t}px`:e}}export{h as TextureCollection,h as default};
