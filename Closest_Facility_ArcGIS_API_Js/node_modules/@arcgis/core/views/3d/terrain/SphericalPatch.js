/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{lerp as t}from"../../../core/mathUtils.js";import{n as i,s,h as e}from"../../../chunks/vec3.js";import{c as r,d as o}from"../../../chunks/vec3f64.js";import{lonLatToSphericalPCPF as n}from"../../../geometry/projection.js";import{getReferenceEllipsoid as a}from"../../../geometry/projectionEllipsoid.js";import{intersectsSphere as h}from"../../../geometry/support/frustum.js";import{create as l}from"../../../geometry/support/plane.js";import{createSphericalGlobePatch as d}from"./PatchGeometryFactory.js";import c from"./Tile.js";class p extends c{constructor(t,i,s){super(u),this.obb=new Array(8),this.isWebMercator=!1;for(let e=0;e<8;e++)this.obb[e]=r();void 0!==t&&this.init(t,i,s)}init(s,e,r){super.init(s,e,r),this.isWebMercator=r.tilingScheme.spatialReference.isWebMercator;const a=this.ellipsoid.radius,h=this.extentInRadians[0],l=this.extentInRadians[1],d=this.extentInRadians[2],c=this.extentInRadians[3],p=s[0],u=t(l,c,.5),m=t(h,d,.5),f=0===p?0:Math.min(Math.abs(l),Math.abs(c));this._edgeLen=(d-h)*Math.cos(f)*a,this._edgeLen2=this._edgeLen*this._edgeLen,this._curvatureHeight=a-Math.sqrt(a*a-this._edgeLen2/4),n(this.centerAtSeaLevel,m,u,this.ellipsoid.radius,0);const _=o(this.centerAtSeaLevel);i(_,_),this.up=_,this._updateOBB(),this.updateRadiusAndCenter()}updateRadiusAndCenter(){if(0===this.lij[0])s(this._center[1],0,0,0),s(this._center[0],0,0,0),s(this._center[2],0,0,0),this.ellipsoid||(this.ellipsoid=a(this.surface.spatialReference)),this._center[1][3]=this.ellipsoid.radius+this.elevationBounds[1];else{this._updateCenter();const t=Math.max(e(this._center[1],this.obb[0]),e(this._center[1],this.obb[1]));this._center[1][3]=Math.sqrt(t)}}_isVisible(t){if(!this.intersectsClippingArea)return!1;if(!h(t,this._center[1]))return!1;if(this.lij[0]<10)return!0;const i=this.obb;for(let s=0;s<6;s++){const e=4===s,r=t[s];e&&(m[0]=r[0],m[1]=r[1],m[2]=r[2],m[3]=r[3]-this.surface.view.state.camera.near);const o=e?m:r;let n;for(n=0;n<8;n++){const t=i[n];if(o[0]*t[0]+o[1]*t[1]+o[2]*t[2]+o[3]<0)break}if(8===n)return!1}return!0}computeElevationBounds(){super.computeElevationBounds(),this._updateOBB()}createGeometry(t,i){const s=this._isPole(this.lij[1],this.lij[0]);d(t,this.extent,i,this.renderData,this.extentInRadians,this.isWebMercator,this.ellipsoid,s),this.setMemoryDirty()}_updateOBB(){const t=this.extentInRadians,i=this.obb;for(let s=0;s<2;s++){const e=this.elevationBounds[s];let r=4*s;n(i[r++],t[0],t[1],this.ellipsoid.radius,e),n(i[r++],t[0],t[3],this.ellipsoid.radius,e),n(i[r++],t[2],t[3],this.ellipsoid.radius,e),n(i[r++],t[2],t[1],this.ellipsoid.radius,e)}if(this.isWebMercator){const t=this._isPole(this.lij[1],this.lij[0]);2===t?(s(i[1],0,0,this.ellipsoid.radius),s(i[2],0,0,this.ellipsoid.radius),s(i[5],0,0,this.ellipsoid.radius),s(i[6],0,0,this.ellipsoid.radius)):1===t&&(s(i[0],0,0,-this.ellipsoid.radius),s(i[3],0,0,-this.ellipsoid.radius),s(i[4],0,0,-this.ellipsoid.radius),s(i[7],0,0,-this.ellipsoid.radius))}}_isPole(t,i){let s=0;return t===(1<<i)-1&&(s+=1),0===t&&(s+=2),s}intersectsRay(t,i,s,e,r){const o=this._center[1],n=o[3],a=o[0],h=o[1],l=o[2],d=n+s+.2*this.ellipsoid.radius*Math.abs(r*(this.extentInRadians[3]-this.extentInRadians[1])),c=i[0]*i[0]+i[1]*i[1]+i[2]*i[2],p=a-t[0],u=h-t[1],m=l-t[2],f=(p*i[0]+u*i[1]+m*i[2])/c,_=i[0]*f-p,b=i[1]*f-u,j=i[2]*f-m;return _*_+b*b+j*j<d*d}}const u=[128,64,32,16,16,8,8,4],m=l();export{p as SphericalPatch};
