/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import e from"../../../../../core/Logger.js";import{isSome as t,isNone as o,applySome as r,unwrap as n}from"../../../../../core/maybe.js";import i from"../../../../../core/PooledArray.js";import{e as s,t as a,g as m}from"../../../../../chunks/mat3.js";import{c,a as l}from"../../../../../chunks/mat3f32.js";import{h as p,w as h,t as f,g as u}from"../../../../../chunks/vec3.js";import{c as b}from"../../../../../chunks/vec3f64.js";import{c as g}from"../../../../../chunks/vec4.js";import{c as d}from"../../../../../chunks/vec4f32.js";import{encodeSymbolColor as y}from"../../../layers/support/symbolColorUtils.js";import{clone as C,radius as j}from"../../../support/orientedBoundingBox.js";import{glLayout as w}from"../../../support/buffer/glUtil.js";import{newLayout as M}from"../../../support/buffer/InterleavedLayout.js";import x from"./ComponentData.js";import{ComponentObject as _}from"./ComponentObject.js";import{isVaryingComponentParameters as v}from"./interface.js";import S from"./IntersectionGeometry.js";import{Renderable as D}from"./Renderable.js";import{RenderGeometry as P}from"./RenderGeometry.js";import{RenderSubmitSystem as O}from"./RenderSubmitSystem.js";import{createVertexBufferLayout as k}from"./SourceGeometry.js";import{ComponentParametersVarying as U,ComponentParametersUniform as B,ComponentMaterial as A}from"./Material/ComponentMaterial.js";import{ComponentDrawParameters as G}from"./Material/ComponentTechnique.js";import{TwoVectorPosition as I}from"../../core/util/TwoVectorPosition.js";import{getVisibility as R,updateVisibilityWithCount as T}from"../../lib/ComponentUtils.js";import{assert as V}from"../../lib/Util.js";import{BufferManager as E}from"../../lib/TextureBackedBuffer/BufferManager.js";import L from"../../../../webgl/BufferObject.js";import q from"../../../../webgl/VertexArrayObject.js";const F=e.getLogger("esri.views.3d.webgl-engine.collections.Component.ComponentObjectCollection");class H{constructor(e){this._renderManager=e,this._objects=[new i,new i],this._renderSubmit=new O(this),this._renderManager.register(this._renderSubmit),this._componentBufferManager=new E(e.rctx)}dispose(){V(0===this._objects[0].length&&0===this._objects[1].length,"ObjectCollection should be empty upon disposal"),this._componentBufferManager.destroy()}createObject(e){const t=new _;return t.toMapSpace=e.toMapSpace.slice(),t.transform=e.transform,t.obb=C(e.obb),t.components=new x(this._componentBufferManager,e.geometry.componentOffsets),t.renderable=this._createRenderable(e,t.components),t.intersectionGeometry=new S(e.geometry.positionData,t.components),this._objects[t.visible].push(t),t}destroyObject(e){const t=e;this._objects[t.visible].removeUnordered(t),t.dispose(),this._notifyDirty()}setObjectVisibility(e,t){const o=e;t!==o.visible&&(this._objects[o.visible].removeUnordered(o),this._objects[t].push(o),o.visible=t,this._notifyDirty())}preSubmit(e){const t=e.camera.eye;this.visibleObjects.forAll((e=>{const o=p(t,e.obb.center);e.renderable.meta.cameraDepthSquared=o}))}getMaterial(e){return e.renderable.material}updateMaterial(e,t){const o=e.renderable.material;t(o),o.dirty&&this._notifyDirty()}setAllComponentVisibilities(e,t){const o=e;o.components.visibility.reset(t),o.components.visibilityDirty(),this._notifyDirty()}forEachVisibleComponent(e,t){return e.components.visibility.forEachComponent(t)}getComponentCount(e){const t=e,o=t.components.visibility.componentCount();return{visible:o,invisible:t.components.count-o}}setComponentData(e,t){const o=e,r=o.renderable.material;if(v(t)){const e=o.components,n=e.materialDataBuffer,i=e.materialDataIndices,s={castShadows:!0,pickable:!0,externalColor:d(),externalColorMixMode:1},a=n.textureBuffer,m=new Uint8Array(4),c=new Uint32Array(m.buffer);let l=0,p=0,h=0,f=!1,u=0;for(let o=0;o<e.count;o++)t(o,s),l+=+(s.externalColor[3]<1),p+=+(3===s.externalColorMixMode&&1===s.externalColor[3]),h+=+s.castShadows,y(s.externalColor,s.externalColorMixMode,m),m[2]=254&m[2]|+s.castShadows,a.setData(i[o],0,m[0],m[1],m[2],m[3]),f=f||o>0&&u!==c[0],u=c[0],s.pickable!==R(e.pickability,o)&&(e.pickability=T(e.pickability,e.count,o,s.pickable));f?(r.componentParameters=new U,r.componentParameters.castShadows=N(h,e.count),r.componentParameters.transparent=N(l,e.count),r.componentParameters.opaqueOverride=N(p,e.count),r.componentParameters.texture=a,a.updateTexture()):(r.componentParameters=new B,r.componentParameters.castShadows=s.castShadows?0:2,r.componentParameters.externalColor=s.externalColor,r.componentParameters.externalColorMixMode=s.externalColorMixMode)}else r.componentParameters=new B,r.componentParameters.castShadows=t.castShadows?0:2,r.componentParameters.externalColor=t.externalColor,r.componentParameters.externalColorMixMode=t.externalColorMixMode;this._notifyDirty()}getComponentAabb(e,t,o){return e.intersectionGeometry.getComponentAabb(t,o)}getComponentObb(e){return e.obb}getObjectTransform(e){return e.transform}getComponentPositions(e,t,o){return e.intersectionGeometry.getComponentPositions(t,o)}intersect(e,o,r,n,i,m){const c=e;t(i)&&(i.localOrigin=c.transform.position);const l=s(J,c.transform.rotationScale);h(K,o,c.transform.position),h(Q,r,c.transform.position),f(K,K,l),f(Q,Q,l);const p=a(J,l);return c.intersectionGeometry.intersect(K,Q,n,p,i,m)}addEdges(e,t,o,r){const n=e,{indices:i,positions:s}=n.intersectionGeometry,a=n.components.offsets;return t.addComponentObject(e,n.transform,{center:n.obb.center,radius:j(n.obb)},s,i,a,o,r)}addComponentHighlight(e,t){const r=e.components;o(r.highlightCounts)&&(r.highlightCounts=new Uint32Array(r.count+1));0===r.highlightCounts[t]++&&(r.highlightsDirty(),this._notifyDirty()),r.highlightCounts[r.count]++}removeComponentHighlight(e,t){const r=e.components;if(o(r.highlightCounts))return void F.warn("Removing non-existing highlight.");const n=r.highlightCounts[t],i=r.highlightCounts[r.count];if(0!==n){if(n>1)return r.highlightCounts[t]=n-1,void(r.highlightCounts[r.count]=i-1);r.highlightCounts[t]=0,r.highlightsDirty(),this._notifyDirty(),1===i?r.highlightCounts=null:r.highlightCounts[r.count]=i-1}else F.warn("Removing non-existing highlight.")}clearHighlights(e){const o=e.components;t(o.highlightCounts)&&(o.highlightCounts=null,o.highlightsDirty(),this._notifyDirty())}getObjectGPUMemoryUsage(e){return e.renderable.meta.gpuMemoryEstimate}get visibleObjects(){return this._objects[1]}_createRenderable(e,o){const i=this._renderManager.rctx,c=e.geometry,p=c.vertices.layoutParameters,h=L.createVertex(i,35044,c.vertices.data),f=r(c.indices,(e=>L.createIndex(i,35044,e))),b=w(k(p)),d=new Uint16Array(c.vertices.count);for(let r=0;r<o.count;r++){const e=o.offsets[r],n=o.offsets[r+1],i=o.materialDataIndices[r];if(t(c.indices))for(let t=e;t<n;t++){d[c.indices[t]]=i}else for(let t=e;t<n;t++)d[t]=i}const y=L.createVertex(i,35044,d.buffer),C=new I(e.transform.position),j=l(e.transform.rotationScale);s(j,j),a(j,j);const M=new G;u(M.worldFromModel_TL,C.low),u(M.worldFromModel_TH,C.high),m(M.worldFromModel_RS,e.transform.rotationScale),m(M.transformNormal_GlobalFromModel,j),g(M.toMapSpace,e.toMapSpace);const x=new A,_=new q(i,x.attributeLocations,{data:b,componentIndices:z},{data:h,componentIndices:y},n(f)),v=new P(_,4,p,t(f)),S={cameraDepthSquared:.5,gpuMemoryEstimate:h.byteSize+y.byteSize+(t(f)?f.byteSize:0)};return new D(x,M,v,S)}_notifyDirty(){this._renderManager.notifyDirty()}}const z=w(M().u16("componentIndex"));function N(e,t){return e===t?0:0===e?2:1}const J=c(),K=b(),Q=b();export{H as ComponentObjectCollection};
