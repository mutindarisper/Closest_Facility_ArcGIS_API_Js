/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{isSome as s}from"../../../../../core/maybe.js";import{f as a,t as e,e as r}from"../../../../../chunks/mat3.js";import{c as t}from"../../../../../chunks/mat3f64.js";import{e as i}from"../../../../../chunks/mat4.js";import{s as h}from"../../../../../chunks/vec2.js";import{b as n,s as m,g as o,f as l}from"../../../../../chunks/vec3.js";import{c as P}from"../../../../../chunks/vec3f64.js";import{c}from"../../../../../chunks/vec4.js";import{d as p}from"../../../../../chunks/boundedPlane.js";import{MaterialPassesParameters as d,ShadowMapPassParameters as u,HighlightPassParameters as _}from"./AllRenderPasses.js";import{RenderPass as w}from"./RenderPass.js";import{TwoVectorPosition as g}from"../util/TwoVectorPosition.js";import{union as f}from"../../lib/depthRange.js";class b{constructor(s,a){this.rctx=s,this.shaderTechniqueRepository=a,this.canRender=!0,this._materialPassParams=new d,this._shadowPassParams=new u,this._highlightPassParams=new _,this._systems=new Set,this._passes={materialOpaque:new w(s,this.shaderTechniqueRepository),materialTransparent:new w(s,this.shaderTechniqueRepository,1),materialIntegratedMesh:new w(s,this.shaderTechniqueRepository),shadowMap:new w(s,this.shaderTechniqueRepository),highlight:new w(s,this.shaderTechniqueRepository),highlightIntegratedMesh:new w(s,this.shaderTechniqueRepository),highlightShadowMap:new w(s,this.shaderTechniqueRepository),defaultShadowMap:new w(s,this.shaderTechniqueRepository)}}register(s){this._systems.add(s)}prepareRender(s){if(0!==this._systems.size){for(const s of Object.values(this._passes))s.prepareSubmit();this._systems.forEach((a=>a.submit(this._passes,{camera:s})));for(const s of Object.values(this._passes))s.finishSubmit();this.shaderTechniqueRepository.frameUpdate()}}render(s){if(0===this._systems.size)return!1;switch(this._configure(s),s.slot){case 4:switch(s.pass){case 0:return this._materialPassParams.subPass=0,this._configureMaterialColorPass(s),this._passes.materialOpaque.dispatch(this._materialPassParams);case 2:return this._materialPassParams.subPass=2,this._passes.materialOpaque.dispatch(this._materialPassParams);case 3:return this._materialPassParams.subPass=3,this._passes.materialOpaque.dispatch(this._materialPassParams);case 5:return this._passes.highlight.dispatch(this._highlightPassParams);case 4:return this._passes.shadowMap.dispatch(this._shadowPassParams);case 7:return this._passes.highlightShadowMap.dispatch(this._shadowPassParams);case 6:return this._passes.defaultShadowMap.dispatch(this._shadowPassParams)}return!1;case 6:switch(s.pass){case 0:return this._materialPassParams.subPass=0,this._configureMaterialColorPass(s),this._passes.materialTransparent.dispatch(this._materialPassParams);case 1:return this._materialPassParams.subPass=1,this._configureMaterialColorPass(s),this._passes.materialTransparent.dispatch(this._materialPassParams);case 2:return this._materialPassParams.subPass=2,this._passes.materialTransparent.dispatch(this._materialPassParams);case 3:return this._materialPassParams.subPass=3,this._passes.materialTransparent.dispatch(this._materialPassParams)}return!1;case 1:switch(s.pass){case 0:return this._materialPassParams.subPass=0,this._configureMaterialColorPass(s),this._materialPassParams.ssrParams=s.ssrParams,this._passes.materialIntegratedMesh.dispatch(this._materialPassParams);case 2:return this._materialPassParams.subPass=2,this._passes.materialIntegratedMesh.dispatch(this._materialPassParams);case 3:return this._materialPassParams.subPass=3,this._passes.materialIntegratedMesh.dispatch(this._materialPassParams);case 5:return this._passes.highlightIntegratedMesh.dispatch(this._highlightPassParams)}return!1}return!1}notifyDirty(){this._context.requestRender()}slots(){return[4,6,1]}initializeRenderContext(s){this._context=s}uninitializeRenderContext(){}queryDepthRange(a){const e={near:1/0,far:-1/0};return this._systems.forEach((r=>{const t=r.queryShadowCasterDepthRange(a);s(t)&&f(e,t,e)})),e}get shadowCastingEnabled(){return this._materialPassParams.shadowsEnabled}set shadowCastingEnabled(s){this._materialPassParams.shadowsEnabled=s}get screenSpaceReflectionsEnabled(){return s(this._materialPassParams.ssrParams.ssrEnabled)}set screenSpaceReflectionsEnabled(s){this._materialPassParams.ssrParams.ssrEnabled=!!s}_configureMaterialColorPass(s){this._materialPassParams.bindShadowMap=a=>{s.shadowMap.bind(a);const e=this._materialPassParams.viewTransform;n(T,e.worldFromView_TL,e.worldFromView_TH),s.shadowMap.bindView(a,T)},this._materialPassParams.bindAmbientOcclusion=a=>s.ssaoHelper.bind(a,s.camera),this._materialPassParams.ambientOcclusionEnabled=!!s.ssaoHelper&&s.ssaoHelper.ready,this._materialPassParams.sceneHasOcludees=s.hasOccludees}_configure(s){const a=4===s.pass||7===s.pass||6===s.pass?this._shadowPassParams:5===s.pass?this._highlightPassParams:this._materialPassParams;this._updateParameters(s,a)}_updateParameters(s,t){const n=s.camera,P=n.viewInverseTransposeMatrix;m(T,P[3],P[7],P[11]),R.set(T),o(t.viewTransform.worldFromView_TH,R.high),o(t.viewTransform.worldFromView_TL,R.low),a(t.viewTransform.viewFromCameraRelative_RS,n.viewMatrix),i(t.viewTransform.projFromView,n.projectionMatrix),0===t.identifier?(this._materialPassParams.transparent=6===s.slot,this._materialPassParams.integratedMesh=1===s.slot,this._materialPassParams.lighting=s.scenelightingData,e(y,t.viewTransform.viewFromCameraRelative_RS),r(t.transformNormal_ViewFromGlobal,y),h(t.cameraNearFar,n.near,n.far)):1===t.identifier?h(t.cameraNearFar,n.near,n.far):2===t.identifier&&(t.highlightDepthTexture=s.highlightDepthTexture,c(t.viewport,n.fullViewport)),0!==t.identifier&&2!==t.identifier||(t.inverseViewport[0]=1/n.fullViewport[2],t.inverseViewport[1]=1/n.fullViewport[3]),p(s.sliceHelper.plane,t.slicePlane),l(t.slicePlane.origin,t.slicePlane.origin,T),t.slicePlaneEnabled=s.sliceHelper.isEnabled,this._materialPassParams.transparencyPassType=s.transparencyPassType,this._materialPassParams.multipassTerrainParams=s.multipassTerrainParams}get needsHighlight(){return this._passes.highlight.count>0||this._passes.highlightIntegratedMesh.count>0}}const T=P(),y=t(),R=new g;export{b as RenderPassManager};
