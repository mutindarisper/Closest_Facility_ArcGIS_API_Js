/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import e from"../../../../support/debugFlags.js";import{RgbaFloatEncoding as t}from"../util/RgbaFloatEncoding.glsl.js";import{glsl as l}from"../../shaderModules/interfaces.js";function p(e,t){e.constants.add("stippleAlphaColorDiscard","float",.001),e.constants.add("stippleAlphaHighlightDiscard","float",.5),t.stippleEnabled?a(e,t):r(e)}function a(p,a){p.fragment.include(t);const r=a.draped&&e.ENABLE_CONTINUOUS_LINE_PATTERNS;r?p.vertex.uniforms.add("worldToScreenRatio","float"):p.vertex.uniforms.add("stipplePatternPixelSizeInv","float"),a.stippleUVMaxEnabled&&p.varyings.add("stipplePatternUvMax","float"),p.varyings.add("stipplePatternUv","float"),p.fragment.uniforms.add("stipplePatternTexture","sampler2D"),p.fragment.uniforms.add("stipplePatternSDFNormalizer","float"),r&&p.fragment.uniforms.add("stipplePatternPixelSizeInv","float"),a.stippleOffColorEnabled&&p.fragment.uniforms.add("stippleOffColor","vec4"),r?p.fragment.code.add(l`float getStippleValue() {
return rgba2float(texture2D(stipplePatternTexture, vec2(mod(stipplePatternUv * stipplePatternPixelSizeInv, 1.0), 0.5)));
}`):p.fragment.code.add(l`
      float getStippleValue() {
        float stipplePatternUvClamped = stipplePatternUv * gl_FragCoord.w;
        ${a.stippleUVMaxEnabled?"stipplePatternUvClamped = clamp(stipplePatternUvClamped, 0.0, stipplePatternUvMax);":""}
        return rgba2float(texture2D(stipplePatternTexture, vec2(mod(stipplePatternUvClamped, 1.0), 0.5)));
      }
    `),p.fragment.code.add(l`float getStippleSDF() {
return (getStippleValue() * 2.0 - 1.0) * stipplePatternSDFNormalizer;
}
float getStippleAlpha() {
return clamp(getStippleSDF() + 0.5, 0.0, 1.0);
}`),a.stippleOffColorEnabled?p.fragment.code.add(l`#define discardByStippleAlpha(stippleAlpha, threshold) {}
#define blendStipple(color, stippleAlpha) mix(color, stippleOffColor, stippleAlpha)`):p.fragment.code.add(l`#define discardByStippleAlpha(stippleAlpha, threshold) if (stippleAlpha < threshold) { discard; }
#define blendStipple(color, stippleAlpha) vec4(color.rgb, color.a * stippleAlpha)`)}function r(e){e.fragment.code.add(l`float getStippleAlpha() { return 1.0; }
#define discardByStippleAlpha(_stippleAlpha_, _threshold_) {}
#define blendStipple(color, _stippleAlpha_) color`)}export{p as LineStipple};
