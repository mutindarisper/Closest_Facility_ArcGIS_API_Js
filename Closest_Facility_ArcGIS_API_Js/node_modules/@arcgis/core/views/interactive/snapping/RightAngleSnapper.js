/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{sign as e}from"../../../core/mathUtils.js";import{unwrap as t}from"../../../core/maybe.js";import{a as r,h as i,q as o,u as s}from"../../../chunks/vec2.js";import{a as n,f as p}from"../../../chunks/vec2f64.js";import{SnappingAlgorithm as g}from"./SnappingAlgorithm.js";import{RayConstraint as h}from"./SnappingConstraint.js";import{anyMapPointToScreenPoint as a,squareDistance as d}from"./snappingUtils.js";import{RightAngleSnappingCandidate as c}from"./candidates/RightAngleSnappingCandidate.js";class f extends g{constructor(){super(...arguments),this._tmp=n()}snapNewVertex(e,t){const r=t.editGeometryOperations.data.components[0],i=r.vertices.length,o=[];if(i<2)return o;const s=a(e,t.coordinateHelper,t.elevationInfo,this.view),n=r.vertices[i-1];this._checkForSnappingCandidate(o,n.leftEdge,n.pos,e,n.leftEdge.leftVertex.pos,n.pos,t,e,s);const p=r.vertices[0];return this._checkForSnappingCandidate(o,p.rightEdge,p.pos,e,p.rightEdge.rightVertex.pos,p.pos,t,e,s),o}snapExistingVertex(e,r){const i=[],o=t(r.vertexHandle),s=o.component,n=s.vertices.length;if(n<3)return i;const p=a(e,r.coordinateHelper,r.elevationInfo,this.view),g=o.leftEdge,h=o.rightEdge,d=s.vertices[0],c=s.vertices[n-1];if(!g)return this._checkForSnappingCandidate(i,d.rightEdge.rightVertex.rightEdge,d.rightEdge.rightVertex.pos,e,d.rightEdge.rightVertex.rightEdge.rightVertex.pos,d.rightEdge.rightVertex.pos,r,e,p),i;if(!h)return this._checkForSnappingCandidate(i,c.leftEdge.leftVertex.leftEdge,c.leftEdge.leftVertex.pos,e,c.leftEdge.leftVertex.leftEdge.leftVertex.pos,c.leftEdge.leftVertex.pos,r,e,p),i;if(g&&g.leftVertex.leftEdge){const t=g.leftVertex.leftEdge;this._checkForSnappingCandidate(i,t,g.leftVertex.pos,e,t.leftVertex.pos,g.leftVertex.pos,r,e,p)}if(h&&h.rightVertex.rightEdge){const t=h.rightVertex.rightEdge;this._checkForSnappingCandidate(i,t,h.rightVertex.pos,e,t.rightVertex.pos,h.rightVertex.pos,r,e,p)}return i}_checkForSnappingCandidate(t,g,f,l,x,V,m,E,v){if(!this.edgeExceedsShortLineThreshold(g,m))return;r(this._tmp,g.rightVertex.pos,g.leftVertex.pos);const u=p(this._tmp[1],-this._tmp[0]),_=i(u,r(this._tmp,l,f))/o(u),S=m.coordinateHelper,k=S.fromXYZ(s(n(),V,u,_),S.getZ(E,0));d(v,a(k,S,m.elevationInfo,this.view))<this.squaredProximityTreshold(m.pointer)&&t.push(new c({coordinateHelper:S,targetPoint:k,constraint:new h(S,V,s(S.createVector(),V,u,e(_))),previousVertex:x,otherVertex:V,otherVertexType:1}))}}export{f as RightAngleSnapper};
