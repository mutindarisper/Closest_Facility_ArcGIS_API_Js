/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import e from"../../../core/Evented.js";import{HandleOwner as i}from"../../../core/HandleOwner.js";import{isSome as n}from"../../../core/maybe.js";import{isAborted as s}from"../../../core/promiseUtils.js";import{init as o}from"../../../core/watchUtils.js";import{property as r}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/Logger.js";import{subclass as a}from"../../../core/accessorSupport/decorators/subclass.js";import{reaction as d}from"../../../core/accessorSupport/trackingUtils.js";import{j as c}from"../../../chunks/vec2.js";import h from"../../../geometry/SpatialReference.js";import{FeatureSnappingEngine as p}from"./FeatureSnappingEngine.js";import{SelfSnappingEngine as l}from"./SelfSnappingEngine.js";import u from"./SnappingOptions.js";import{squareDistance as f,anyMapPointToScreenPoint as v,sortCandidatesInPlace as m}from"./snappingUtils.js";import{IntersectionSnappingCandidate as g}from"./candidates/IntersectionSnappingCandidate.js";let y=class extends(e.EventedMixin(i)){constructor(t){super(t),this.options=new u,this.engines=[],this._currentMainCandidate=null,this._currentOtherActiveCandidates=[]}initialize(){this.handles.add([d((()=>{const{effectiveFeatureEnabled:t,effectiveSelfEnabled:e,touchSensitivityMultiplier:i,distance:n}=this.options;return{effectiveFeatureEnabled:t,effectiveSelfEnabled:e,touchSensitivityMultiplier:i,distance:n}}),(()=>{this.doneSnapping(),this.emit("changed")})),this.watch("options",(t=>{for(const e of this.engines)e.options=t}),!0),o(this.view,"ready",(t=>this.onViewReady(t)),!0)])}destroy(){this.destroyEngines()}get updating(){return this.engines.some((t=>t.updating))}onViewReady(t){var e,i;(this.destroyEngines(),t)&&(this.engines=[new l({view:this.view,options:this.options}),new p({view:this.view,spatialReference:null!=(e=null==(i=this.view)?void 0:i.spatialReference)?e:h.WGS84,options:this.options})])}destroyEngines(){for(const t of this.engines)t.destroy();this.engines.length=0}get squaredMouseProximityTreshold(){return this.options.distance*this.options.distance}get squaredTouchProximityThreshold(){const{distance:t,touchSensitivityMultiplier:e}=this.options,i=t*e;return i*i}async snap(t,e,i){const o=e.coordinateHelper.pointToVector(t),r=await this.fetchCandidates(o,e,i);return{get valid(){return!s(i)},apply:()=>{const{snappedPoint:t,hints:i}=this.processCandidates(o,r,e);return this.removeVisualization(),n(e.visualizer)&&this.handles.add(e.visualizer.draw(i,{coordinateHelper:e.coordinateHelper,elevationInfo:e.elevationInfo,view:this.view}),C),t}}}update(t,e){this.removeVisualization();let i=t;const s=[];if(n(this._currentMainCandidate)){const n=e.coordinateHelper,o=n.pointToVector(t),r=this._currentMainCandidate.constraint.closestTo(o);if(f(v(o,n,e.elevationInfo,this.view),v(r,n,e.elevationInfo,this.view))<this.squaredPointProximityThreshold(e.pointer)){i=n.vectorToDehydratedPoint(r),this._currentMainCandidate.targetPoint=r,s.push(...this._currentMainCandidate.hints);for(const t of this._currentOtherActiveCandidates)t.targetPoint=r,s.push(...t.hints)}else this._currentMainCandidate=null,this._currentOtherActiveCandidates=[]}return n(e.visualizer)&&this.handles.add(e.visualizer.draw(s,{coordinateHelper:e.coordinateHelper,elevationInfo:e.elevationInfo,view:this.view}),C),i}doneSnapping(){this.removeVisualization(),this._currentMainCandidate=null,this._currentOtherActiveCandidates=[]}removeVisualization(){this.handles.remove(C)}async fetchCandidates(t,e,i){return(await Promise.all(this.engines.map((n=>n.fetchCandidates(t,e,i))))).flat()}processCandidates(t,e,i){if(e.length<1)return this.doneSnapping(),{snappedPoint:i.coordinateHelper.vectorToDehydratedPoint(t),hints:[]};m(t,e);const s=this._currentMainCandidate;if(n(s)){const n=this.findOldConstraintInNewCandidates(s,e);if(n>=0){if(!(e[n]instanceof g))return this.intersectWithOtherCandidates(n,e,t,i);if(c(t,s.targetPoint)<this.squaredPointProximityThreshold(i.pointer))return this.updateSnappingCandidate(s,e,i)}}return this.intersectWithOtherCandidates(0,e,t,i)}findOldConstraintInNewCandidates(t,e){return t instanceof g?this.findOldCandidateIndex(e,t.first)>=0&&this.findOldCandidateIndex(e,t.second)>=0?0:-1:this.findOldCandidateIndex(e,t)}intersectWithOtherCandidates(t,e,i,n){const s=e[t],o=[],r=n.coordinateHelper;for(let a=0;a<e.length;++a){if(a===t)continue;const d=e[a];for(const t of s.constraint.intersect(d.constraint)){const e=r.fromXYZ(t.intersection,s.targetPoint[2]);o.push([new g(r,e,s,d),f(v(i,n.coordinateHelper,n.elevationInfo,this.view),v(e,n.coordinateHelper,n.elevationInfo,this.view))])}}return o.length>0&&(o.sort(((t,e)=>t[1]-e[1])),o[0][1]<this.squaredPointProximityThreshold(n.pointer))?this.updateSnappingCandidate(o[0][0],e,n):this.updateSnappingCandidate(s,e,n)}updateSnappingCandidate(t,e,i){this.doneSnapping(),this._currentMainCandidate=t;const n=this._currentMainCandidate.targetPoint,s=[];s.push(...t.hints);for(const o of e){if(t instanceof g){if(o.constraint.objectEqual(t.first.constraint)||o.constraint.objectEqual(t.second.constraint))continue}else if(o.constraint.objectEqual(t.constraint))continue;o.constraint.check(n)&&(o.targetPoint=n,this._currentOtherActiveCandidates.push(o),s.push(...o.hints))}return{snappedPoint:i.coordinateHelper.vectorToDehydratedPoint(n),hints:s}}squaredPointProximityThreshold(t){return"touch"===t?this.squaredTouchProximityThreshold:this.squaredMouseProximityTreshold}findOldCandidateIndex(t,e){let i=-1;for(let n=0;n<t.length;++n)if(e.constraint.objectEqual(t[n].constraint)){i=n;break}return i}get test(){return{visualizationsActive:this.handles.has(C),engines:this.engines}}};t([r({constructOnly:!0})],y.prototype,"view",void 0),t([r()],y.prototype,"options",void 0),t([r({readOnly:!0})],y.prototype,"updating",null),t([r()],y.prototype,"engines",void 0),t([r()],y.prototype,"squaredMouseProximityTreshold",null),t([r()],y.prototype,"squaredTouchProximityThreshold",null),y=t([a("esri.views.interactive.snapping.SnappingManager")],y);const C="visualization-handle";export{y as SnappingManager};
