"use strict";(self.webpackChunkarcgis_rm=self.webpackChunkarcgis_rm||[]).push([[2247],{92247:(e,r,s)=>{s.r(r),s.d(r,{default:()=>a}),s(91957);var t=s(61681),o=s(34780),i=s(11931),l=s(31329),n=s(7928),c=s(32498),m=s(91772);class a{convertVectorFieldData(e){const r=o.Z.fromJSON(e.pixelBlock),s=(0,n.KC)(r,e.type);return Promise.resolve((0,t.pC)(s)&&s.toJSON())}async decode(e){const r=await(0,i.Jx)(e.data,e.options);return r&&r.toJSON()}symbolize(e){e.pixelBlock=o.Z.fromJSON(e.pixelBlock),e.extent=e.extent?m.Z.fromJSON(e.extent):null;const r=this.symbolizer.symbolize(e);return Promise.resolve((0,t.pC)(r)&&r.toJSON())}async updateSymbolizer(e){var r;this.symbolizer=c.Z.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===(null==(r=this.symbolizer)?void 0:r.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const r=this.symbolizer.simpleStretch(o.Z.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve((0,t.pC)(r)&&r.toJSON())}estimateStatisticsHistograms(e){const r=(0,l.Hv)(o.Z.fromJSON(e.srcPixelBlock));return Promise.resolve(r)}split(e){const r=(0,l.Vl)(o.Z.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return r&&r.forEach(((e,s)=>{r.set(s,null==e?void 0:e.toJSON())})),Promise.resolve(r)}async mosaicAndTransform(e){const r=e.srcPixelBlocks.map((e=>e?new o.Z(e):null)),s=(0,l.us)(r,e.srcMosaicSize,null,null,e.alignmentInfo);if(!e.coefs)return s&&s.toJSON();const t=(0,l.Uk)(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return t&&t.toJSON()}}}}]);